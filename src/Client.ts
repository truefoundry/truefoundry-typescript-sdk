/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "./core";
import * as TrueFoundry from "./api/index";
import urlJoin from "url-join";
import * as errors from "./errors/index";
import { Internal } from "./api/resources/internal/client/Client";
import { Users } from "./api/resources/users/client/Client";
import { Teams } from "./api/resources/teams/client/Client";
import { PersonalAccessTokens } from "./api/resources/personalAccessTokens/client/Client";
import { VirtualAccounts } from "./api/resources/virtualAccounts/client/Client";
import { Secrets } from "./api/resources/secrets/client/Client";
import { SecretGroups } from "./api/resources/secretGroups/client/Client";
import { Clusters } from "./api/resources/clusters/client/Client";
import { Environments } from "./api/resources/environments/client/Client";
import { Applications } from "./api/resources/applications/client/Client";
import { ApplicationVersions } from "./api/resources/applicationVersions/client/Client";
import { Jobs } from "./api/resources/jobs/client/Client";
import { Workspaces } from "./api/resources/workspaces/client/Client";
import { Events } from "./api/resources/events/client/Client";
import { Alerts } from "./api/resources/alerts/client/Client";
import { Logs } from "./api/resources/logs/client/Client";
import { MlRepos } from "./api/resources/mlRepos/client/Client";
import { Artifacts } from "./api/resources/artifacts/client/Client";
import { Agents } from "./api/resources/agents/client/Client";
import { Prompts } from "./api/resources/prompts/client/Client";
import { Tools } from "./api/resources/tools/client/Client";
import { Models } from "./api/resources/models/client/Client";
import { ArtifactVersions } from "./api/resources/artifactVersions/client/Client";
import { ModelVersions } from "./api/resources/modelVersions/client/Client";
import { PromptVersions } from "./api/resources/promptVersions/client/Client";
import { ToolVersions } from "./api/resources/toolVersions/client/Client";
import { AgentVersions } from "./api/resources/agentVersions/client/Client";
import { DataDirectories } from "./api/resources/dataDirectories/client/Client";
import { TracingProjects } from "./api/resources/tracingProjects/client/Client";

export declare namespace TrueFoundryClient {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class TrueFoundryClient {
    protected _internal: Internal | undefined;
    protected _users: Users | undefined;
    protected _teams: Teams | undefined;
    protected _personalAccessTokens: PersonalAccessTokens | undefined;
    protected _virtualAccounts: VirtualAccounts | undefined;
    protected _secrets: Secrets | undefined;
    protected _secretGroups: SecretGroups | undefined;
    protected _clusters: Clusters | undefined;
    protected _environments: Environments | undefined;
    protected _applications: Applications | undefined;
    protected _applicationVersions: ApplicationVersions | undefined;
    protected _jobs: Jobs | undefined;
    protected _workspaces: Workspaces | undefined;
    protected _events: Events | undefined;
    protected _alerts: Alerts | undefined;
    protected _logs: Logs | undefined;
    protected _mlRepos: MlRepos | undefined;
    protected _artifacts: Artifacts | undefined;
    protected _agents: Agents | undefined;
    protected _prompts: Prompts | undefined;
    protected _tools: Tools | undefined;
    protected _models: Models | undefined;
    protected _artifactVersions: ArtifactVersions | undefined;
    protected _modelVersions: ModelVersions | undefined;
    protected _promptVersions: PromptVersions | undefined;
    protected _toolVersions: ToolVersions | undefined;
    protected _agentVersions: AgentVersions | undefined;
    protected _dataDirectories: DataDirectories | undefined;
    protected _tracingProjects: TracingProjects | undefined;

    constructor(protected readonly _options: TrueFoundryClient.Options) {}

    public get internal(): Internal {
        return (this._internal ??= new Internal(this._options));
    }

    public get users(): Users {
        return (this._users ??= new Users(this._options));
    }

    public get teams(): Teams {
        return (this._teams ??= new Teams(this._options));
    }

    public get personalAccessTokens(): PersonalAccessTokens {
        return (this._personalAccessTokens ??= new PersonalAccessTokens(this._options));
    }

    public get virtualAccounts(): VirtualAccounts {
        return (this._virtualAccounts ??= new VirtualAccounts(this._options));
    }

    public get secrets(): Secrets {
        return (this._secrets ??= new Secrets(this._options));
    }

    public get secretGroups(): SecretGroups {
        return (this._secretGroups ??= new SecretGroups(this._options));
    }

    public get clusters(): Clusters {
        return (this._clusters ??= new Clusters(this._options));
    }

    public get environments(): Environments {
        return (this._environments ??= new Environments(this._options));
    }

    public get applications(): Applications {
        return (this._applications ??= new Applications(this._options));
    }

    public get applicationVersions(): ApplicationVersions {
        return (this._applicationVersions ??= new ApplicationVersions(this._options));
    }

    public get jobs(): Jobs {
        return (this._jobs ??= new Jobs(this._options));
    }

    public get workspaces(): Workspaces {
        return (this._workspaces ??= new Workspaces(this._options));
    }

    public get events(): Events {
        return (this._events ??= new Events(this._options));
    }

    public get alerts(): Alerts {
        return (this._alerts ??= new Alerts(this._options));
    }

    public get logs(): Logs {
        return (this._logs ??= new Logs(this._options));
    }

    public get mlRepos(): MlRepos {
        return (this._mlRepos ??= new MlRepos(this._options));
    }

    public get artifacts(): Artifacts {
        return (this._artifacts ??= new Artifacts(this._options));
    }

    public get agents(): Agents {
        return (this._agents ??= new Agents(this._options));
    }

    public get prompts(): Prompts {
        return (this._prompts ??= new Prompts(this._options));
    }

    public get tools(): Tools {
        return (this._tools ??= new Tools(this._options));
    }

    public get models(): Models {
        return (this._models ??= new Models(this._options));
    }

    public get artifactVersions(): ArtifactVersions {
        return (this._artifactVersions ??= new ArtifactVersions(this._options));
    }

    public get modelVersions(): ModelVersions {
        return (this._modelVersions ??= new ModelVersions(this._options));
    }

    public get promptVersions(): PromptVersions {
        return (this._promptVersions ??= new PromptVersions(this._options));
    }

    public get toolVersions(): ToolVersions {
        return (this._toolVersions ??= new ToolVersions(this._options));
    }

    public get agentVersions(): AgentVersions {
        return (this._agentVersions ??= new AgentVersions(this._options));
    }

    public get dataDirectories(): DataDirectories {
        return (this._dataDirectories ??= new DataDirectories(this._options));
    }

    public get tracingProjects(): TracingProjects {
        return (this._tracingProjects ??= new TracingProjects(this._options));
    }

    /**
     * Applies a given manifest to create or update resources of specific types, such as provider-account, cluster, workspace, or ml-repo.
     *
     * @param {TrueFoundry.TrueFoundryApplyRequest} request
     * @param {TrueFoundryClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.apply({
     *         manifest: {
     *             type: "ml-repo",
     *             name: "name",
     *             storage_integration_fqn: "storage_integration_fqn",
     *             collaborators: [{
     *                     subject: "subject",
     *                     role_id: "role_id"
     *                 }]
     *         }
     *     })
     */
    public apply(
        request: TrueFoundry.TrueFoundryApplyRequest,
        requestOptions?: TrueFoundryClient.RequestOptions,
    ): core.HttpResponsePromise<TrueFoundry.TrueFoundryApplyResponse> {
        return core.HttpResponsePromise.fromPromise(this.__apply(request, requestOptions));
    }

    private async __apply(
        request: TrueFoundry.TrueFoundryApplyRequest,
        requestOptions?: TrueFoundryClient.RequestOptions,
    ): Promise<core.WithRawResponse<TrueFoundry.TrueFoundryApplyResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "api/svc/v1/apply",
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "truefoundry-sdk",
                "X-Fern-SDK-Version": "0.1.6",
                "User-Agent": "truefoundry-sdk/0.1.6",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as TrueFoundry.TrueFoundryApplyResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.TrueFoundryError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError("Timeout exceeded when calling PUT /api/svc/v1/apply.");
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes resources of specific types, such as provider-account, cluster, workspace, or application.
     *
     * @param {TrueFoundry.TrueFoundryDeleteRequest} request
     * @param {TrueFoundryClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.delete({
     *         manifest: {
     *             type: "ml-repo",
     *             name: "name",
     *             storage_integration_fqn: "storage_integration_fqn",
     *             collaborators: [{
     *                     subject: "subject",
     *                     role_id: "role_id"
     *                 }]
     *         }
     *     })
     */
    public delete(
        request: TrueFoundry.TrueFoundryDeleteRequest,
        requestOptions?: TrueFoundryClient.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(request, requestOptions));
    }

    private async __delete(
        request: TrueFoundry.TrueFoundryDeleteRequest,
        requestOptions?: TrueFoundryClient.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "api/svc/v1/delete",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "truefoundry-sdk",
                "X-Fern-SDK-Version": "0.1.6",
                "User-Agent": "truefoundry-sdk/0.1.6",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.TrueFoundryError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError("Timeout exceeded when calling POST /api/svc/v1/delete.");
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["TFY_API_KEY"];
        if (bearer == null) {
            throw new errors.TrueFoundryError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a TFY_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
