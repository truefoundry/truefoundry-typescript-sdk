/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core/index.js";
import * as TrueFoundry from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Applications {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Applications {
    protected readonly _options: Applications.Options;

    constructor(_options: Applications.Options) {
        this._options = _options;
    }

    /**
     * Retrieves a list of all latest applications. Supports filtering by application ID, name, type, and other parameters. Pagination is available based on query parameters.
     *
     * @param {TrueFoundry.ApplicationsListRequest} request
     * @param {Applications.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.BadRequestError}
     *
     * @example
     *     await client.applications.list({
     *         limit: 10,
     *         offset: 0
     *     })
     */
    public async list(
        request: TrueFoundry.ApplicationsListRequest = {},
        requestOptions?: Applications.RequestOptions,
    ): Promise<core.Page<TrueFoundry.Application>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: TrueFoundry.ApplicationsListRequest,
            ): Promise<core.WithRawResponse<TrueFoundry.ListApplicationsResponse>> => {
                const {
                    limit = 100,
                    offset = 0,
                    applicationId,
                    workspaceId,
                    applicationName,
                    fqn,
                    workspaceFqn,
                    applicationType,
                    nameSearchQuery,
                    environmentId,
                    clusterId,
                    applicationSetId,
                    paused,
                    deviceTypeFilter,
                    lastDeployedBySubjects,
                    lifecycleStage,
                    isRecommendationPresentAndVisible,
                } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (limit != null) {
                    _queryParams["limit"] = limit.toString();
                }
                if (offset != null) {
                    _queryParams["offset"] = offset.toString();
                }
                if (applicationId != null) {
                    _queryParams["applicationId"] = applicationId;
                }
                if (workspaceId != null) {
                    _queryParams["workspaceId"] = workspaceId;
                }
                if (applicationName != null) {
                    _queryParams["applicationName"] = applicationName;
                }
                if (fqn != null) {
                    _queryParams["fqn"] = fqn;
                }
                if (workspaceFqn != null) {
                    _queryParams["workspaceFqn"] = workspaceFqn;
                }
                if (applicationType != null) {
                    _queryParams["applicationType"] = applicationType;
                }
                if (nameSearchQuery != null) {
                    _queryParams["nameSearchQuery"] = nameSearchQuery;
                }
                if (environmentId != null) {
                    _queryParams["environmentId"] = environmentId;
                }
                if (clusterId != null) {
                    _queryParams["clusterId"] = clusterId;
                }
                if (applicationSetId != null) {
                    _queryParams["applicationSetId"] = applicationSetId;
                }
                if (paused != null) {
                    _queryParams["paused"] = paused.toString();
                }
                if (deviceTypeFilter != null) {
                    _queryParams["deviceTypeFilter"] = deviceTypeFilter;
                }
                if (lastDeployedBySubjects != null) {
                    _queryParams["lastDeployedBySubjects"] = lastDeployedBySubjects;
                }
                if (lifecycleStage != null) {
                    _queryParams["lifecycleStage"] = lifecycleStage;
                }
                if (isRecommendationPresentAndVisible != null) {
                    _queryParams["isRecommendationPresentAndVisible"] = isRecommendationPresentAndVisible.toString();
                }
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)),
                        "api/svc/v1/apps",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as TrueFoundry.ListApplicationsResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 400:
                            throw new TrueFoundry.BadRequestError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        default:
                            throw new errors.TrueFoundryError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.TrueFoundryError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.TrueFoundryTimeoutError("Timeout exceeded when calling GET /api/svc/v1/apps.");
                    case "unknown":
                        throw new errors.TrueFoundryError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        let _offset = request?.offset != null ? request?.offset : 0;
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<TrueFoundry.ListApplicationsResponse, TrueFoundry.Application>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => (response?.data ?? []).length > 0,
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                _offset += response?.data != null ? response.data.length : 1;
                return list(core.setObjectProperty(request, "offset", _offset));
            },
        });
    }

    /**
     * Create a new Application Deployment based on the provided manifest.
     *
     * @param {TrueFoundry.CreateDeploymentRequest} request
     * @param {Applications.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.BadRequestError}
     * @throws {@link TrueFoundry.ForbiddenError}
     * @throws {@link TrueFoundry.NotFoundError}
     * @throws {@link TrueFoundry.ConflictError}
     *
     * @example
     *     await client.applications.createOrUpdate({
     *         manifest: {
     *             "key": "value"
     *         }
     *     })
     */
    public createOrUpdate(
        request: TrueFoundry.CreateDeploymentRequest,
        requestOptions?: Applications.RequestOptions,
    ): core.HttpResponsePromise<TrueFoundry.GetApplicationDeploymentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createOrUpdate(request, requestOptions));
    }

    private async __createOrUpdate(
        request: TrueFoundry.CreateDeploymentRequest,
        requestOptions?: Applications.RequestOptions,
    ): Promise<core.WithRawResponse<TrueFoundry.GetApplicationDeploymentResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "api/svc/v1/apps",
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as TrueFoundry.GetApplicationDeploymentResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new TrueFoundry.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new TrueFoundry.ForbiddenError(
                        _response.error.body as TrueFoundry.HttpError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new TrueFoundry.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new TrueFoundry.ConflictError(
                        _response.error.body as TrueFoundry.HttpError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError("Timeout exceeded when calling PUT /api/svc/v1/apps.");
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get Application associated with the provided application ID.
     *
     * @param {string} id - Id of the application
     * @param {Applications.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.ForbiddenError}
     * @throws {@link TrueFoundry.NotFoundError}
     *
     * @example
     *     await client.applications.get("id")
     */
    public get(
        id: string,
        requestOptions?: Applications.RequestOptions,
    ): core.HttpResponsePromise<TrueFoundry.GetApplicationResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, requestOptions));
    }

    private async __get(
        id: string,
        requestOptions?: Applications.RequestOptions,
    ): Promise<core.WithRawResponse<TrueFoundry.GetApplicationResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `api/svc/v1/apps/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as TrueFoundry.GetApplicationResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new TrueFoundry.ForbiddenError(
                        _response.error.body as TrueFoundry.HttpError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new TrueFoundry.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError("Timeout exceeded when calling GET /api/svc/v1/apps/{id}.");
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete Application associated with the provided application ID.
     *
     * @param {string} id - Id of the application
     * @param {Applications.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.ForbiddenError}
     * @throws {@link TrueFoundry.NotFoundError}
     *
     * @example
     *     await client.applications.delete("id")
     */
    public delete(
        id: string,
        requestOptions?: Applications.RequestOptions,
    ): core.HttpResponsePromise<TrueFoundry.DeleteApplicationResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(id, requestOptions));
    }

    private async __delete(
        id: string,
        requestOptions?: Applications.RequestOptions,
    ): Promise<core.WithRawResponse<TrueFoundry.DeleteApplicationResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `api/svc/v1/apps/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as TrueFoundry.DeleteApplicationResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new TrueFoundry.ForbiddenError(
                        _response.error.body as TrueFoundry.HttpError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new TrueFoundry.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError("Timeout exceeded when calling DELETE /api/svc/v1/apps/{id}.");
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Pause a running application by scaling to 0 replicas
     *
     * @param {string} id - Id of the application
     * @param {Applications.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.ForbiddenError}
     * @throws {@link TrueFoundry.NotFoundError}
     * @throws {@link TrueFoundry.MethodNotAllowedError}
     * @throws {@link TrueFoundry.NotImplementedError}
     *
     * @example
     *     await client.applications.scaleToZero("id")
     */
    public scaleToZero(id: string, requestOptions?: Applications.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__scaleToZero(id, requestOptions));
    }

    private async __scaleToZero(
        id: string,
        requestOptions?: Applications.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `api/svc/v1/apps/${encodeURIComponent(id)}/scale-to-zero`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new TrueFoundry.ForbiddenError(
                        _response.error.body as TrueFoundry.HttpError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new TrueFoundry.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 405:
                    throw new TrueFoundry.MethodNotAllowedError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new TrueFoundry.NotImplementedError(
                        _response.error.body as TrueFoundry.HttpError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling PATCH /api/svc/v1/apps/{id}/scale-to-zero.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Resume a paused application by scaling back to the original number of replicas
     *
     * @param {string} id - Id of the application
     * @param {Applications.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.ForbiddenError}
     * @throws {@link TrueFoundry.NotFoundError}
     * @throws {@link TrueFoundry.NotImplementedError}
     *
     * @example
     *     await client.applications.scaleToOriginal("id")
     */
    public scaleToOriginal(
        id: string,
        requestOptions?: Applications.RequestOptions,
    ): core.HttpResponsePromise<TrueFoundry.Deployment> {
        return core.HttpResponsePromise.fromPromise(this.__scaleToOriginal(id, requestOptions));
    }

    private async __scaleToOriginal(
        id: string,
        requestOptions?: Applications.RequestOptions,
    ): Promise<core.WithRawResponse<TrueFoundry.Deployment>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `api/svc/v1/apps/${encodeURIComponent(id)}/scale-to-original`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as TrueFoundry.Deployment, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new TrueFoundry.ForbiddenError(
                        _response.error.body as TrueFoundry.HttpError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new TrueFoundry.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new TrueFoundry.NotImplementedError(
                        _response.error.body as TrueFoundry.HttpError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling PATCH /api/svc/v1/apps/{id}/scale-to-original.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Cancel an ongoing deployment associated with the provided application ID and deployment ID.
     *
     * @param {string} id - Application id of the application
     * @param {string} deploymentId - Deployment id of the deployment
     * @param {Applications.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.ForbiddenError}
     * @throws {@link TrueFoundry.NotFoundError}
     * @throws {@link TrueFoundry.ConflictError}
     *
     * @example
     *     await client.applications.cancelDeployment("id", "deploymentId")
     */
    public cancelDeployment(
        id: string,
        deploymentId: string,
        requestOptions?: Applications.RequestOptions,
    ): core.HttpResponsePromise<TrueFoundry.ApplicationsCancelDeploymentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__cancelDeployment(id, deploymentId, requestOptions));
    }

    private async __cancelDeployment(
        id: string,
        deploymentId: string,
        requestOptions?: Applications.RequestOptions,
    ): Promise<core.WithRawResponse<TrueFoundry.ApplicationsCancelDeploymentResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `api/svc/v1/apps/${encodeURIComponent(id)}/deployments/${encodeURIComponent(deploymentId)}/cancel`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as TrueFoundry.ApplicationsCancelDeploymentResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new TrueFoundry.ForbiddenError(
                        _response.error.body as TrueFoundry.HttpError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new TrueFoundry.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new TrueFoundry.ConflictError(
                        _response.error.body as TrueFoundry.HttpError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling POST /api/svc/v1/apps/{id}/deployments/{deploymentId}/cancel.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["TFY_API_KEY"];
        if (bearer == null) {
            throw new errors.TrueFoundryError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a TFY_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
