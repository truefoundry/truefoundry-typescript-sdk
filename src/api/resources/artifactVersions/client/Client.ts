/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core/index.js";
import * as TrueFoundry from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace ArtifactVersions {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class ArtifactVersions {
    protected readonly _options: ArtifactVersions.Options;

    constructor(_options: ArtifactVersions.Options) {
        this._options = _options;
    }

    /**
     * @param {TrueFoundry.ApplyArtifactVersionTagsRequest} request
     * @param {ArtifactVersions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.UnprocessableEntityError}
     *
     * @example
     *     await client.artifactVersions.applyTags({
     *         artifact_version_id: "artifact_version_id",
     *         tags: ["tags"]
     *     })
     */
    public applyTags(
        request: TrueFoundry.ApplyArtifactVersionTagsRequest,
        requestOptions?: ArtifactVersions.RequestOptions,
    ): core.HttpResponsePromise<TrueFoundry.EmptyResponse> {
        return core.HttpResponsePromise.fromPromise(this.__applyTags(request, requestOptions));
    }

    private async __applyTags(
        request: TrueFoundry.ApplyArtifactVersionTagsRequest,
        requestOptions?: ArtifactVersions.RequestOptions,
    ): Promise<core.WithRawResponse<TrueFoundry.EmptyResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "api/ml/v1/artifact-versions/tags",
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as TrueFoundry.EmptyResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new TrueFoundry.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling PUT /api/ml/v1/artifact-versions/tags.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get artifact version API
     *
     * @param {string} id
     * @param {ArtifactVersions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.UnprocessableEntityError}
     *
     * @example
     *     await client.artifactVersions.get("id")
     */
    public get(
        id: string,
        requestOptions?: ArtifactVersions.RequestOptions,
    ): core.HttpResponsePromise<TrueFoundry.GetArtifactVersionResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, requestOptions));
    }

    private async __get(
        id: string,
        requestOptions?: ArtifactVersions.RequestOptions,
    ): Promise<core.WithRawResponse<TrueFoundry.GetArtifactVersionResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `api/ml/v1/artifact-versions/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as TrueFoundry.GetArtifactVersionResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new TrueFoundry.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling GET /api/ml/v1/artifact-versions/{id}.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete artifact versions API
     *
     * @param {string} id
     * @param {ArtifactVersions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.UnprocessableEntityError}
     *
     * @example
     *     await client.artifactVersions.delete("id")
     */
    public delete(
        id: string,
        requestOptions?: ArtifactVersions.RequestOptions,
    ): core.HttpResponsePromise<TrueFoundry.EmptyResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(id, requestOptions));
    }

    private async __delete(
        id: string,
        requestOptions?: ArtifactVersions.RequestOptions,
    ): Promise<core.WithRawResponse<TrueFoundry.EmptyResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `api/ml/v1/artifact-versions/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as TrueFoundry.EmptyResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new TrueFoundry.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling DELETE /api/ml/v1/artifact-versions/{id}.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * List artifact version API
     *
     * @param {TrueFoundry.ArtifactVersionsListRequest} request
     * @param {ArtifactVersions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.UnprocessableEntityError}
     *
     * @example
     *     await client.artifactVersions.list()
     */
    public async list(
        request: TrueFoundry.ArtifactVersionsListRequest = {},
        requestOptions?: ArtifactVersions.RequestOptions,
    ): Promise<core.Page<TrueFoundry.ArtifactVersion>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: TrueFoundry.ArtifactVersionsListRequest,
            ): Promise<core.WithRawResponse<TrueFoundry.ListArtifactVersionsResponse>> => {
                const {
                    tag,
                    fqn,
                    artifact_id: artifactId,
                    ml_repo_id: mlRepoId,
                    name,
                    version,
                    run_ids: runIds,
                    run_steps: runSteps,
                    offset = 0,
                    limit = 100,
                    include_internal_metadata: includeInternalMetadata = false,
                } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (tag != null) {
                    _queryParams["tag"] = tag;
                }
                if (fqn != null) {
                    _queryParams["fqn"] = fqn;
                }
                if (artifactId != null) {
                    _queryParams["artifact_id"] = artifactId;
                }
                if (mlRepoId != null) {
                    _queryParams["ml_repo_id"] = mlRepoId;
                }
                if (name != null) {
                    _queryParams["name"] = name;
                }
                if (version != null) {
                    _queryParams["version"] = version.toString();
                }
                if (runIds != null) {
                    if (Array.isArray(runIds)) {
                        _queryParams["run_ids"] = runIds.map((item) => item);
                    } else {
                        _queryParams["run_ids"] = runIds;
                    }
                }
                if (runSteps != null) {
                    if (Array.isArray(runSteps)) {
                        _queryParams["run_steps"] = runSteps.map((item) => item.toString());
                    } else {
                        _queryParams["run_steps"] = runSteps.toString();
                    }
                }
                if (offset != null) {
                    _queryParams["offset"] = offset.toString();
                }
                if (limit != null) {
                    _queryParams["limit"] = limit.toString();
                }
                if (includeInternalMetadata != null) {
                    _queryParams["include_internal_metadata"] = includeInternalMetadata.toString();
                }
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)),
                        "api/ml/v1/artifact-versions",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as TrueFoundry.ListArtifactVersionsResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 422:
                            throw new TrueFoundry.UnprocessableEntityError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        default:
                            throw new errors.TrueFoundryError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.TrueFoundryError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.TrueFoundryTimeoutError(
                            "Timeout exceeded when calling GET /api/ml/v1/artifact-versions.",
                        );
                    case "unknown":
                        throw new errors.TrueFoundryError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        let _offset = request?.offset != null ? request?.offset : 0;
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<TrueFoundry.ListArtifactVersionsResponse, TrueFoundry.ArtifactVersion>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => (response?.data ?? []).length > 0,
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                _offset += response?.data != null ? response.data.length : 1;
                return list(core.setObjectProperty(request, "offset", _offset));
            },
        });
    }

    /**
     * @param {TrueFoundry.GetSignedUrLsRequest} request
     * @param {ArtifactVersions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.UnprocessableEntityError}
     *
     * @example
     *     await client.artifactVersions.getSignedUrls({
     *         id: "id",
     *         paths: ["paths"],
     *         operation: "READ"
     *     })
     */
    public getSignedUrls(
        request: TrueFoundry.GetSignedUrLsRequest,
        requestOptions?: ArtifactVersions.RequestOptions,
    ): core.HttpResponsePromise<TrueFoundry.GetSignedUrLsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getSignedUrls(request, requestOptions));
    }

    private async __getSignedUrls(
        request: TrueFoundry.GetSignedUrLsRequest,
        requestOptions?: ArtifactVersions.RequestOptions,
    ): Promise<core.WithRawResponse<TrueFoundry.GetSignedUrLsResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "api/ml/v1/artifact-versions/signed-urls",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as TrueFoundry.GetSignedUrLsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new TrueFoundry.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling POST /api/ml/v1/artifact-versions/signed-urls.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {TrueFoundry.CreateMultiPartUploadRequest} request
     * @param {ArtifactVersions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.UnprocessableEntityError}
     *
     * @example
     *     await client.artifactVersions.createMultiPartUpload({
     *         id: "id",
     *         path: "path",
     *         num_parts: 1
     *     })
     */
    public createMultiPartUpload(
        request: TrueFoundry.CreateMultiPartUploadRequest,
        requestOptions?: ArtifactVersions.RequestOptions,
    ): core.HttpResponsePromise<TrueFoundry.MultiPartUploadResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createMultiPartUpload(request, requestOptions));
    }

    private async __createMultiPartUpload(
        request: TrueFoundry.CreateMultiPartUploadRequest,
        requestOptions?: ArtifactVersions.RequestOptions,
    ): Promise<core.WithRawResponse<TrueFoundry.MultiPartUploadResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "api/ml/v1/artifact-versions/signed-urls/multipart",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as TrueFoundry.MultiPartUploadResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new TrueFoundry.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling POST /api/ml/v1/artifact-versions/signed-urls/multipart.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {TrueFoundry.StageArtifactRequest} request
     * @param {ArtifactVersions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.UnprocessableEntityError}
     *
     * @example
     *     await client.artifactVersions.stage({
     *         manifest: {
     *             name: "name",
     *             metadata: {
     *                 "key": "value"
     *             },
     *             ml_repo: "ml_repo",
     *             type: "model-version",
     *             source: {
     *                 type: "truefoundry"
     *             }
     *         }
     *     })
     */
    public stage(
        request: TrueFoundry.StageArtifactRequest,
        requestOptions?: ArtifactVersions.RequestOptions,
    ): core.HttpResponsePromise<TrueFoundry.StageArtifactResponse> {
        return core.HttpResponsePromise.fromPromise(this.__stage(request, requestOptions));
    }

    private async __stage(
        request: TrueFoundry.StageArtifactRequest,
        requestOptions?: ArtifactVersions.RequestOptions,
    ): Promise<core.WithRawResponse<TrueFoundry.StageArtifactResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "api/ml/v1/artifact-versions/stage",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as TrueFoundry.StageArtifactResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new TrueFoundry.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling POST /api/ml/v1/artifact-versions/stage.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {TrueFoundry.ListFilesRequest} request
     * @param {ArtifactVersions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.UnprocessableEntityError}
     *
     * @example
     *     await client.artifactVersions.listFiles({
     *         id: "id"
     *     })
     */
    public async listFiles(
        request: TrueFoundry.ListFilesRequest,
        requestOptions?: ArtifactVersions.RequestOptions,
    ): Promise<core.Page<TrueFoundry.FileInfo>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: TrueFoundry.ListFilesRequest,
            ): Promise<core.WithRawResponse<TrueFoundry.ListFilesResponse>> => {
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)),
                        "api/ml/v1/artifact-versions/files",
                    ),
                    method: "POST",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                        requestOptions?.headers,
                    ),
                    contentType: "application/json",
                    requestType: "json",
                    body: request,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as TrueFoundry.ListFilesResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 422:
                            throw new TrueFoundry.UnprocessableEntityError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        default:
                            throw new errors.TrueFoundryError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.TrueFoundryError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.TrueFoundryTimeoutError(
                            "Timeout exceeded when calling POST /api/ml/v1/artifact-versions/files.",
                        );
                    case "unknown":
                        throw new errors.TrueFoundryError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<TrueFoundry.ListFilesResponse, TrueFoundry.FileInfo>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.pagination?.next_page_token != null &&
                !(
                    typeof response?.pagination?.next_page_token === "string" &&
                    response?.pagination?.next_page_token === ""
                ),
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "page_token", response?.pagination?.next_page_token));
            },
        });
    }

    /**
     * @param {TrueFoundry.MarkStageArtifactFailureRequest} request
     * @param {ArtifactVersions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.UnprocessableEntityError}
     *
     * @example
     *     await client.artifactVersions.markStageFailure({
     *         id: "id"
     *     })
     */
    public markStageFailure(
        request: TrueFoundry.MarkStageArtifactFailureRequest,
        requestOptions?: ArtifactVersions.RequestOptions,
    ): core.HttpResponsePromise<TrueFoundry.EmptyResponse> {
        return core.HttpResponsePromise.fromPromise(this.__markStageFailure(request, requestOptions));
    }

    private async __markStageFailure(
        request: TrueFoundry.MarkStageArtifactFailureRequest,
        requestOptions?: ArtifactVersions.RequestOptions,
    ): Promise<core.WithRawResponse<TrueFoundry.EmptyResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "api/ml/v1/artifact-versions/mark-stage-failure",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as TrueFoundry.EmptyResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new TrueFoundry.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling POST /api/ml/v1/artifact-versions/mark-stage-failure.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["TFY_API_KEY"];
        if (bearer == null) {
            throw new errors.TrueFoundryError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a TFY_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
