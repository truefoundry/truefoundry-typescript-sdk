/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as TrueFoundry from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Deprecated {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Deprecated {
    constructor(protected readonly _options: Deprecated.Options) {}

    /**
     * @param {TrueFoundry.GetSearchRunsGetRequest} request
     * @param {Deprecated.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.UnprocessableEntityError}
     *
     * @example
     *     await client.deprecated.getSearchRunsGet()
     */
    public async getSearchRunsGet(
        request: TrueFoundry.GetSearchRunsGetRequest = {},
        requestOptions?: Deprecated.RequestOptions,
    ): Promise<TrueFoundry.SearchRunsResponseDto> {
        const { filter, page_token: pageToken, offset, run_view_type: runViewType, max_results: maxResults } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (filter != null) {
            _queryParams["filter"] = filter;
        }

        if (pageToken != null) {
            _queryParams["page_token"] = pageToken;
        }

        if (offset != null) {
            _queryParams["offset"] = offset.toString();
        }

        if (runViewType != null) {
            _queryParams["run_view_type"] = runViewType;
        }

        if (maxResults != null) {
            _queryParams["max_results"] = maxResults.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "api/ml/api/2.0/preview/mlflow/runs/search",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "truefoundry-sdk",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "truefoundry-sdk/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as TrueFoundry.SearchRunsResponseDto;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new TrueFoundry.UnprocessableEntityError(
                        _response.error.body as TrueFoundry.HttpValidationError,
                    );
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling GET /api/ml/api/2.0/preview/mlflow/runs/search.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get Run by run name
     *
     * @param {TrueFoundry.GetRunByNameGetRequest} request
     * @param {Deprecated.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.UnprocessableEntityError}
     *
     * @example
     *     await client.deprecated.getRunByNameGet({
     *         run_name: "run_name"
     *     })
     */
    public async getRunByNameGet(
        request: TrueFoundry.GetRunByNameGetRequest,
        requestOptions?: Deprecated.RequestOptions,
    ): Promise<TrueFoundry.RunResponseDto> {
        const { run_name: runName, experiment_id: experimentId, experiment_name: experimentName } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["run_name"] = runName;
        if (experimentId != null) {
            _queryParams["experiment_id"] = experimentId;
        }

        if (experimentName != null) {
            _queryParams["experiment_name"] = experimentName;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "api/ml/api/2.0mlflow/runs/get-by-name",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "truefoundry-sdk",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "truefoundry-sdk/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as TrueFoundry.RunResponseDto;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new TrueFoundry.UnprocessableEntityError(
                        _response.error.body as TrueFoundry.HttpValidationError,
                    );
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling GET /api/ml/api/2.0mlflow/runs/get-by-name.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["TFY_API_KEY"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
