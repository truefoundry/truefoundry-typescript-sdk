/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core/index.js";
import * as TrueFoundry from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";
import { Users } from "../resources/users/client/Client.js";
import { AiGateway } from "../resources/aiGateway/client/Client.js";
import { Clusters } from "../resources/clusters/client/Client.js";
import { Deployments } from "../resources/deployments/client/Client.js";
import { Applications } from "../resources/applications/client/Client.js";
import { Metrics } from "../resources/metrics/client/Client.js";
import { Vcs } from "../resources/vcs/client/Client.js";
import { DockerRegistries } from "../resources/dockerRegistries/client/Client.js";
import { Workflows } from "../resources/workflows/client/Client.js";
import { ArtifactVersions } from "../resources/artifactVersions/client/Client.js";
import { Ml } from "../resources/ml/client/Client.js";

export declare namespace Internal {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

export class Internal {
    protected readonly _options: Internal.Options;
    protected _users: Users | undefined;
    protected _aiGateway: AiGateway | undefined;
    protected _clusters: Clusters | undefined;
    protected _deployments: Deployments | undefined;
    protected _applications: Applications | undefined;
    protected _metrics: Metrics | undefined;
    protected _vcs: Vcs | undefined;
    protected _dockerRegistries: DockerRegistries | undefined;
    protected _workflows: Workflows | undefined;
    protected _artifactVersions: ArtifactVersions | undefined;
    protected _ml: Ml | undefined;

    constructor(_options: Internal.Options) {
        this._options = _options;
    }

    public get users(): Users {
        return (this._users ??= new Users(this._options));
    }

    public get aiGateway(): AiGateway {
        return (this._aiGateway ??= new AiGateway(this._options));
    }

    public get clusters(): Clusters {
        return (this._clusters ??= new Clusters(this._options));
    }

    public get deployments(): Deployments {
        return (this._deployments ??= new Deployments(this._options));
    }

    public get applications(): Applications {
        return (this._applications ??= new Applications(this._options));
    }

    public get metrics(): Metrics {
        return (this._metrics ??= new Metrics(this._options));
    }

    public get vcs(): Vcs {
        return (this._vcs ??= new Vcs(this._options));
    }

    public get dockerRegistries(): DockerRegistries {
        return (this._dockerRegistries ??= new DockerRegistries(this._options));
    }

    public get workflows(): Workflows {
        return (this._workflows ??= new Workflows(this._options));
    }

    public get artifactVersions(): ArtifactVersions {
        return (this._artifactVersions ??= new ArtifactVersions(this._options));
    }

    public get ml(): Ml {
        return (this._ml ??= new Ml(this._options));
    }

    /**
     * Get IDs associated with the FQN for various entity types, such as deployment, application, workspace, or cluster.
     *
     * @param {string} type - Entity Type
     * @param {TrueFoundry.InternalGetIdFromFqnRequest} request
     * @param {Internal.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.BadRequestError}
     * @throws {@link TrueFoundry.NotFoundError}
     *
     * @example
     *     await client.internal.getIdFromFqn("type", {
     *         fqn: "fqn"
     *     })
     */
    public getIdFromFqn(
        type: string,
        request: TrueFoundry.InternalGetIdFromFqnRequest,
        requestOptions?: Internal.RequestOptions,
    ): core.HttpResponsePromise<Record<string, unknown>> {
        return core.HttpResponsePromise.fromPromise(this.__getIdFromFqn(type, request, requestOptions));
    }

    private async __getIdFromFqn(
        type: string,
        request: TrueFoundry.InternalGetIdFromFqnRequest,
        requestOptions?: Internal.RequestOptions,
    ): Promise<core.WithRawResponse<Record<string, unknown>>> {
        const { fqn } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["fqn"] = fqn;
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `api/svc/v1/fqn/${encodeURIComponent(type)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Record<string, unknown>, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new TrueFoundry.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new TrueFoundry.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError("Timeout exceeded when calling GET /api/svc/v1/fqn/{type}.");
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["TFY_API_KEY"];
        if (bearer == null) {
            throw new errors.TrueFoundryError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a TFY_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
