/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../../../core";
import * as TrueFoundry from "../../../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../../../errors/index";

export declare namespace ArtifactVersions {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class ArtifactVersions {
    constructor(protected readonly _options: ArtifactVersions.Options) {}

    /**
     * List artifact version API
     *
     * @param {TrueFoundry.internal.ArtifactVersionsListRequest} request
     * @param {ArtifactVersions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.UnprocessableEntityError}
     *
     * @example
     *     await client.internal.artifactVersions.list()
     */
    public async list(
        request: TrueFoundry.internal.ArtifactVersionsListRequest = {},
        requestOptions?: ArtifactVersions.RequestOptions,
    ): Promise<core.Page<TrueFoundry.InternalListArtifactVersionsResponseDataItem>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: TrueFoundry.internal.ArtifactVersionsListRequest,
            ): Promise<core.WithRawResponse<TrueFoundry.InternalListArtifactVersionsResponse>> => {
                const {
                    fqn,
                    artifact_id: artifactId,
                    ml_repo_id: mlRepoId,
                    name,
                    version,
                    run_ids: runIds,
                    run_steps: runSteps,
                    offset,
                    limit,
                    include_internal_metadata: includeInternalMetadata,
                    include_model_versions: includeModelVersions,
                } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (fqn != null) {
                    _queryParams["fqn"] = fqn;
                }
                if (artifactId != null) {
                    _queryParams["artifact_id"] = artifactId;
                }
                if (mlRepoId != null) {
                    _queryParams["ml_repo_id"] = mlRepoId;
                }
                if (name != null) {
                    _queryParams["name"] = name;
                }
                if (version != null) {
                    _queryParams["version"] = version.toString();
                }
                if (runIds != null) {
                    if (Array.isArray(runIds)) {
                        _queryParams["run_ids"] = runIds.map((item) => item);
                    } else {
                        _queryParams["run_ids"] = runIds;
                    }
                }
                if (runSteps != null) {
                    if (Array.isArray(runSteps)) {
                        _queryParams["run_steps"] = runSteps.map((item) => item.toString());
                    } else {
                        _queryParams["run_steps"] = runSteps.toString();
                    }
                }
                if (offset != null) {
                    _queryParams["offset"] = offset.toString();
                }
                if (limit != null) {
                    _queryParams["limit"] = limit.toString();
                }
                if (includeInternalMetadata != null) {
                    _queryParams["include_internal_metadata"] = includeInternalMetadata.toString();
                }
                if (includeModelVersions != null) {
                    _queryParams["include_model_versions"] = includeModelVersions.toString();
                }
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)),
                        "api/ml/v1/x/artifact-versions",
                    ),
                    method: "GET",
                    headers: {
                        Authorization: await this._getAuthorizationHeader(),
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-SDK-Name": "truefoundry-sdk",
                        "X-Fern-SDK-Version": "0.0.0",
                        "User-Agent": "truefoundry-sdk/0.0.0",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    queryParameters: _queryParams,
                    requestType: "json",
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as TrueFoundry.InternalListArtifactVersionsResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 422:
                            throw new TrueFoundry.UnprocessableEntityError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        default:
                            throw new errors.TrueFoundryError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.TrueFoundryError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.TrueFoundryTimeoutError(
                            "Timeout exceeded when calling GET /api/ml/v1/x/artifact-versions.",
                        );
                    case "unknown":
                        throw new errors.TrueFoundryError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        let _offset = request?.offset != null ? request?.offset : 0;
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<
            TrueFoundry.InternalListArtifactVersionsResponse,
            TrueFoundry.InternalListArtifactVersionsResponseDataItem
        >({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => (response?.data ?? []).length > 0,
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                _offset += response?.data != null ? response.data.length : 1;
                return list(core.setObjectProperty(request, "offset", _offset));
            },
        });
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["TFY_API_KEY"];
        if (bearer == null) {
            throw new errors.TrueFoundryError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a TFY_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
