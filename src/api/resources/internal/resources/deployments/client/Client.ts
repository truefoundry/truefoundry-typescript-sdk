/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../../../core/index.js";
import * as TrueFoundry from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace Deployments {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Deployments {
    protected readonly _options: Deployments.Options;

    constructor(_options: Deployments.Options) {
        this._options = _options;
    }

    /**
     * This endpoint returns all statuses for a specific deployment in a given application.
     *
     * @param {string} id - Application id of the application
     * @param {string} deploymentId - Deployment id of the deployment
     * @param {Deployments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.NotFoundError}
     *
     * @example
     *     await client.internal.deployments.getDeploymentStatuses("id", "deploymentId")
     */
    public getDeploymentStatuses(
        id: string,
        deploymentId: string,
        requestOptions?: Deployments.RequestOptions,
    ): core.HttpResponsePromise<TrueFoundry.DeploymentStatus[]> {
        return core.HttpResponsePromise.fromPromise(this.__getDeploymentStatuses(id, deploymentId, requestOptions));
    }

    private async __getDeploymentStatuses(
        id: string,
        deploymentId: string,
        requestOptions?: Deployments.RequestOptions,
    ): Promise<core.WithRawResponse<TrueFoundry.DeploymentStatus[]>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `api/svc/v1/apps/${encodeURIComponent(id)}/deployments/${encodeURIComponent(deploymentId)}/statuses`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as TrueFoundry.DeploymentStatus[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new TrueFoundry.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling GET /api/svc/v1/apps/{id}/deployments/{deploymentId}/statuses.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This endpoint returns all build details associated with a specific deployment in a given application.
     *
     * @param {string} id - Application id of the application
     * @param {string} deploymentId - Deployment id of the deployment
     * @param {Deployments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.NotFoundError}
     *
     * @example
     *     await client.internal.deployments.getBuilds("id", "deploymentId")
     */
    public getBuilds(
        id: string,
        deploymentId: string,
        requestOptions?: Deployments.RequestOptions,
    ): core.HttpResponsePromise<TrueFoundry.DeploymentBuild[]> {
        return core.HttpResponsePromise.fromPromise(this.__getBuilds(id, deploymentId, requestOptions));
    }

    private async __getBuilds(
        id: string,
        deploymentId: string,
        requestOptions?: Deployments.RequestOptions,
    ): Promise<core.WithRawResponse<TrueFoundry.DeploymentBuild[]>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `api/svc/v1/apps/${encodeURIComponent(id)}/deployments/${encodeURIComponent(deploymentId)}/builds`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as TrueFoundry.DeploymentBuild[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new TrueFoundry.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling GET /api/svc/v1/apps/{id}/deployments/{deploymentId}/builds.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Generate presigned URL to upload code for given serviceName and workspaceFqn
     *
     * @param {TrueFoundry.internal.GenerateCodeUploadPresignedUrlRequest} request
     * @param {Deployments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.internal.deployments.getCodeUploadUrl({
     *         serviceName: "serviceName",
     *         workspaceFqn: "workspaceFqn"
     *     })
     */
    public getCodeUploadUrl(
        request: TrueFoundry.internal.GenerateCodeUploadPresignedUrlRequest,
        requestOptions?: Deployments.RequestOptions,
    ): core.HttpResponsePromise<TrueFoundry.PresignedUrlObject> {
        return core.HttpResponsePromise.fromPromise(this.__getCodeUploadUrl(request, requestOptions));
    }

    private async __getCodeUploadUrl(
        request: TrueFoundry.internal.GenerateCodeUploadPresignedUrlRequest,
        requestOptions?: Deployments.RequestOptions,
    ): Promise<core.WithRawResponse<TrueFoundry.PresignedUrlObject>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "api/svc/v1/deployment/code-upload-url",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as TrueFoundry.PresignedUrlObject, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.TrueFoundryError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling POST /api/svc/v1/deployment/code-upload-url.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Generate deployment endpoint based on the provided query parameters.
     *
     * @param {TrueFoundry.internal.DeploymentsGetSuggestedEndpointRequest} request
     * @param {Deployments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.BadRequestError}
     *
     * @example
     *     await client.internal.deployments.getSuggestedEndpoint({
     *         applicationType: "async-service",
     *         applicationName: "applicationName",
     *         workspaceId: "workspaceId"
     *     })
     */
    public getSuggestedEndpoint(
        request: TrueFoundry.internal.DeploymentsGetSuggestedEndpointRequest,
        requestOptions?: Deployments.RequestOptions,
    ): core.HttpResponsePromise<TrueFoundry.GetSuggestedDeploymentEndpointResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getSuggestedEndpoint(request, requestOptions));
    }

    private async __getSuggestedEndpoint(
        request: TrueFoundry.internal.DeploymentsGetSuggestedEndpointRequest,
        requestOptions?: Deployments.RequestOptions,
    ): Promise<core.WithRawResponse<TrueFoundry.GetSuggestedDeploymentEndpointResponse>> {
        const { applicationType, applicationName, workspaceId, baseDomain, port, preferWildcard = false } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["applicationType"] = applicationType;
        _queryParams["applicationName"] = applicationName;
        _queryParams["workspaceId"] = workspaceId;
        if (baseDomain != null) {
            _queryParams["baseDomain"] = baseDomain;
        }

        if (port != null) {
            _queryParams["port"] = port;
        }

        if (preferWildcard != null) {
            _queryParams["preferWildcard"] = preferWildcard.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "api/svc/v1/deployment/deployment-endpoint",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as TrueFoundry.GetSuggestedDeploymentEndpointResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new TrueFoundry.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling GET /api/svc/v1/deployment/deployment-endpoint.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["TFY_API_KEY"];
        if (bearer == null) {
            throw new errors.TrueFoundryError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a TFY_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
