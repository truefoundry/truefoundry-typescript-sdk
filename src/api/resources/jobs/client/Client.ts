/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as TrueFoundry from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Jobs {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Jobs {
    constructor(protected readonly _options: Jobs.Options) {}

    /**
     * List Job Runs for provided Job Id. Filter the data based on parameters passed in the query
     *
     * @param {string} jobId - Job id of the application
     * @param {TrueFoundry.JobsListRunsRequest} request
     * @param {Jobs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.ForbiddenError}
     * @throws {@link TrueFoundry.NotFoundError}
     * @throws {@link TrueFoundry.UnprocessableEntityError}
     *
     * @example
     *     await client.jobs.listRuns("jobId", {
     *         limit: 10,
     *         offset: 0
     *     })
     */
    public async listRuns(
        jobId: string,
        request: TrueFoundry.JobsListRunsRequest = {},
        requestOptions?: Jobs.RequestOptions,
    ): Promise<core.Page<TrueFoundry.JobRun>> {
        const list = async (request: TrueFoundry.JobsListRunsRequest): Promise<TrueFoundry.ListJobRunResponse> => {
            const { limit, offset, searchPrefix, sortBy, order, triggeredBy, status } = request;
            const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
            if (limit != null) {
                _queryParams["limit"] = limit.toString();
            }
            if (offset != null) {
                _queryParams["offset"] = offset.toString();
            }
            if (searchPrefix != null) {
                _queryParams["searchPrefix"] = searchPrefix;
            }
            if (sortBy != null) {
                _queryParams["sortBy"] = sortBy;
            }
            if (order != null) {
                _queryParams["order"] = order;
            }
            if (triggeredBy != null) {
                if (Array.isArray(triggeredBy)) {
                    _queryParams["triggeredBy"] = triggeredBy.map((item) => item);
                } else {
                    _queryParams["triggeredBy"] = triggeredBy;
                }
            }
            if (status != null) {
                if (Array.isArray(status)) {
                    _queryParams["status"] = status.map((item) => item);
                } else {
                    _queryParams["status"] = status;
                }
            }
            const _response = await (this._options.fetcher ?? core.fetcher)({
                url: urlJoin(
                    (await core.Supplier.get(this._options.baseUrl)) ??
                        (await core.Supplier.get(this._options.environment)),
                    `api/svc/v1/jobs/${encodeURIComponent(jobId)}/runs`,
                ),
                method: "GET",
                headers: {
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "truefoundry-sdk",
                    "X-Fern-SDK-Version": "0.1.0",
                    "User-Agent": "truefoundry-sdk/0.1.0",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                    ...requestOptions?.headers,
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions?.maxRetries,
                abortSignal: requestOptions?.abortSignal,
            });
            if (_response.ok) {
                return _response.body as TrueFoundry.ListJobRunResponse;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 403:
                        throw new TrueFoundry.ForbiddenError(_response.error.body as TrueFoundry.HttpError);
                    case 404:
                        throw new TrueFoundry.NotFoundError(_response.error.body as unknown);
                    case 422:
                        throw new TrueFoundry.UnprocessableEntityError(_response.error.body as unknown);
                    default:
                        throw new errors.TrueFoundryError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.TrueFoundryTimeoutError(
                        "Timeout exceeded when calling GET /api/svc/v1/jobs/{jobId}/runs.",
                    );
                case "unknown":
                    throw new errors.TrueFoundryError({
                        message: _response.error.errorMessage,
                    });
            }
        };
        let _offset = request?.offset != null ? request?.offset : 0;
        return new core.Pageable<TrueFoundry.ListJobRunResponse, TrueFoundry.JobRun>({
            response: await list(request),
            hasNextPage: (response) => (response?.data ?? []).length > 0,
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                _offset += response?.data != null ? response.data.length : 1;
                return list(core.setObjectProperty(request, "offset", _offset));
            },
        });
    }

    /**
     * Get Job Run for provided jobRunName and jobId
     *
     * @param {string} jobId - Application Id of JOB
     * @param {string} jobRunName - Job run name of the application
     * @param {Jobs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.ForbiddenError}
     * @throws {@link TrueFoundry.NotFoundError}
     *
     * @example
     *     await client.jobs.getRun("jobId", "jobRunName")
     */
    public async getRun(
        jobId: string,
        jobRunName: string,
        requestOptions?: Jobs.RequestOptions,
    ): Promise<TrueFoundry.GetJobRunResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `api/svc/v1/jobs/${encodeURIComponent(jobId)}/runs/${encodeURIComponent(jobRunName)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "truefoundry-sdk",
                "X-Fern-SDK-Version": "0.1.0",
                "User-Agent": "truefoundry-sdk/0.1.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as TrueFoundry.GetJobRunResponse;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new TrueFoundry.ForbiddenError(_response.error.body as TrueFoundry.HttpError);
                case 404:
                    throw new TrueFoundry.NotFoundError(_response.error.body as unknown);
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling GET /api/svc/v1/jobs/{jobId}/runs/{jobRunName}.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Delete Job Run for provided jobRunName and jobId
     *
     * @param {string} jobId - Application Id of JOB
     * @param {string} jobRunName - Job run name of the application
     * @param {Jobs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.ForbiddenError}
     * @throws {@link TrueFoundry.NotFoundError}
     * @throws {@link TrueFoundry.ConflictError}
     *
     * @example
     *     await client.jobs.deleteRun("jobId", "jobRunName")
     */
    public async deleteRun(
        jobId: string,
        jobRunName: string,
        requestOptions?: Jobs.RequestOptions,
    ): Promise<TrueFoundry.DeleteJobRunResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `api/svc/v1/jobs/${encodeURIComponent(jobId)}/runs/${encodeURIComponent(jobRunName)}`,
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "truefoundry-sdk",
                "X-Fern-SDK-Version": "0.1.0",
                "User-Agent": "truefoundry-sdk/0.1.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as TrueFoundry.DeleteJobRunResponse;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new TrueFoundry.ForbiddenError(_response.error.body as TrueFoundry.HttpError);
                case 404:
                    throw new TrueFoundry.NotFoundError(_response.error.body as unknown);
                case 409:
                    throw new TrueFoundry.ConflictError(_response.error.body as TrueFoundry.HttpError);
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling DELETE /api/svc/v1/jobs/{jobId}/runs/{jobRunName}.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Trigger Job for provided deploymentId or applicationId
     *
     * @param {TrueFoundry.TriggerJobRequest} request
     * @param {Jobs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.BadRequestError}
     * @throws {@link TrueFoundry.ForbiddenError}
     * @throws {@link TrueFoundry.NotFoundError}
     * @throws {@link TrueFoundry.UnprocessableEntityError}
     *
     * @example
     *     await client.jobs.trigger()
     */
    public async trigger(
        request: TrueFoundry.TriggerJobRequest = {},
        requestOptions?: Jobs.RequestOptions,
    ): Promise<TrueFoundry.TriggerJobRunResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "api/svc/v1/jobs/trigger",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "truefoundry-sdk",
                "X-Fern-SDK-Version": "0.1.0",
                "User-Agent": "truefoundry-sdk/0.1.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as TrueFoundry.TriggerJobRunResponse;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new TrueFoundry.BadRequestError(_response.error.body as unknown);
                case 403:
                    throw new TrueFoundry.ForbiddenError(_response.error.body as TrueFoundry.HttpError);
                case 404:
                    throw new TrueFoundry.NotFoundError(_response.error.body as unknown);
                case 422:
                    throw new TrueFoundry.UnprocessableEntityError(_response.error.body as unknown);
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling POST /api/svc/v1/jobs/trigger.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Terminate Job for provided deploymentId and jobRunName
     *
     * @param {TrueFoundry.JobsTerminateRequest} request
     * @param {Jobs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.ForbiddenError}
     * @throws {@link TrueFoundry.NotFoundError}
     * @throws {@link TrueFoundry.ExpectationFailedError}
     * @throws {@link TrueFoundry.UnprocessableEntityError}
     *
     * @example
     *     await client.jobs.terminate({
     *         deploymentId: "deploymentId",
     *         jobRunName: "jobRunName"
     *     })
     */
    public async terminate(
        request: TrueFoundry.JobsTerminateRequest,
        requestOptions?: Jobs.RequestOptions,
    ): Promise<TrueFoundry.TerminateJobResponse> {
        const { deploymentId, jobRunName } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["deploymentId"] = deploymentId;
        _queryParams["jobRunName"] = jobRunName;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "api/svc/v1/jobs/terminate",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "truefoundry-sdk",
                "X-Fern-SDK-Version": "0.1.0",
                "User-Agent": "truefoundry-sdk/0.1.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as TrueFoundry.TerminateJobResponse;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new TrueFoundry.ForbiddenError(_response.error.body as TrueFoundry.HttpError);
                case 404:
                    throw new TrueFoundry.NotFoundError(_response.error.body as unknown);
                case 417:
                    throw new TrueFoundry.ExpectationFailedError(_response.error.body as TrueFoundry.HttpError);
                case 422:
                    throw new TrueFoundry.UnprocessableEntityError(_response.error.body as unknown);
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling POST /api/svc/v1/jobs/terminate.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["TFY_API_KEY"];
        if (bearer == null) {
            throw new errors.TrueFoundryError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a TFY_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
