/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as TrueFoundry from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace SecretGroups {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class SecretGroups {
    constructor(protected readonly _options: SecretGroups.Options) {}

    /**
     * List the secret groups associated with a user along with the associated secrets for each group. Filtered with the options passed in the query fields. Note: This method does not return the secret values of the <em>associatedSecrets</em> in the response. A separate API call to `/v1/secrets/{id}` should be made to fetch the associated secret value.
     *
     * @param {TrueFoundry.SecretGroupsListRequest} request
     * @param {SecretGroups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.secretGroups.list({
     *         limit: 10,
     *         offset: 0
     *     })
     */
    public async list(
        request: TrueFoundry.SecretGroupsListRequest = {},
        requestOptions?: SecretGroups.RequestOptions,
    ): Promise<core.Page<TrueFoundry.SecretGroup>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: TrueFoundry.SecretGroupsListRequest,
            ): Promise<core.WithRawResponse<TrueFoundry.ListSecretGroupResponse>> => {
                const { limit, offset, fqn, search } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (limit != null) {
                    _queryParams["limit"] = limit.toString();
                }
                if (offset != null) {
                    _queryParams["offset"] = offset.toString();
                }
                if (fqn != null) {
                    _queryParams["fqn"] = fqn;
                }
                if (search != null) {
                    _queryParams["search"] = search;
                }
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)),
                        "api/svc/v1/secret-groups",
                    ),
                    method: "GET",
                    headers: {
                        Authorization: await this._getAuthorizationHeader(),
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-SDK-Name": "truefoundry-sdk",
                        "X-Fern-SDK-Version": "0.1.6",
                        "User-Agent": "truefoundry-sdk/0.1.6",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    queryParameters: _queryParams,
                    requestType: "json",
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as TrueFoundry.ListSecretGroupResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.TrueFoundryError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.TrueFoundryTimeoutError(
                            "Timeout exceeded when calling GET /api/svc/v1/secret-groups.",
                        );
                    case "unknown":
                        throw new errors.TrueFoundryError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        let _offset = request?.offset != null ? request?.offset : 0;
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<TrueFoundry.ListSecretGroupResponse, TrueFoundry.SecretGroup>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => (response?.data ?? []).length > 0,
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                _offset += response?.data != null ? response.data.length : 1;
                return list(core.setObjectProperty(request, "offset", _offset));
            },
        });
    }

    /**
     * Creates a secret group with secrets in it. A secret version for each of the created secret is created with version number as 1. The returned secret group does not have any secret values in the <em>associatedSecrets</em> field. A separate API call to `/v1/secrets/{id}` should be made to fetch the associated secret value.
     *
     * @param {TrueFoundry.CreateSecretGroupRequest} request
     * @param {SecretGroups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.UnprocessableEntityError}
     * @throws {@link TrueFoundry.FailedDependencyError}
     *
     * @example
     *     await client.secretGroups.create({
     *         name: "name",
     *         integrationId: "integrationId",
     *         secrets: [{
     *                 key: "key",
     *                 value: "value"
     *             }]
     *     })
     */
    public create(
        request: TrueFoundry.CreateSecretGroupRequest,
        requestOptions?: SecretGroups.RequestOptions,
    ): core.HttpResponsePromise<TrueFoundry.GetSecretGroupResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: TrueFoundry.CreateSecretGroupRequest,
        requestOptions?: SecretGroups.RequestOptions,
    ): Promise<core.WithRawResponse<TrueFoundry.GetSecretGroupResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "api/svc/v1/secret-groups",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "truefoundry-sdk",
                "X-Fern-SDK-Version": "0.1.6",
                "User-Agent": "truefoundry-sdk/0.1.6",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as TrueFoundry.GetSecretGroupResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new TrueFoundry.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 424:
                    throw new TrueFoundry.FailedDependencyError(
                        _response.error.body as TrueFoundry.HttpError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling POST /api/svc/v1/secret-groups.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get Secret Group by id. This method does not return the secret values of the <em>associatedSecrets</em> in the response. A separate API call to `/v1/secrets/{id}` should be made to fetch the associated secret value.
     *
     * @param {string} id - Secret Id of the secret group.
     * @param {SecretGroups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.ForbiddenError}
     * @throws {@link TrueFoundry.NotFoundError}
     *
     * @example
     *     await client.secretGroups.get("id")
     */
    public get(
        id: string,
        requestOptions?: SecretGroups.RequestOptions,
    ): core.HttpResponsePromise<TrueFoundry.GetSecretGroupResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, requestOptions));
    }

    private async __get(
        id: string,
        requestOptions?: SecretGroups.RequestOptions,
    ): Promise<core.WithRawResponse<TrueFoundry.GetSecretGroupResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `api/svc/v1/secret-groups/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "truefoundry-sdk",
                "X-Fern-SDK-Version": "0.1.6",
                "User-Agent": "truefoundry-sdk/0.1.6",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as TrueFoundry.GetSecretGroupResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new TrueFoundry.ForbiddenError(
                        _response.error.body as TrueFoundry.HttpError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new TrueFoundry.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling GET /api/svc/v1/secret-groups/{id}.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates the secrets in a secret group with new values. A new secret version is created for every secret that has a modified value and any omitted secrets are deleted. The returned updated secret group does not have any secret values in the <em>associatedSecrets</em> field. A separate API call to `/v1/secrets/{id}` should be made to fetch the associated secret value.
     *
     * @param {string} id - Secret Id of the secret group.
     * @param {TrueFoundry.UpdateSecretGroupRequest} request
     * @param {SecretGroups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.BadRequestError}
     * @throws {@link TrueFoundry.ForbiddenError}
     * @throws {@link TrueFoundry.NotFoundError}
     * @throws {@link TrueFoundry.UnprocessableEntityError}
     *
     * @example
     *     await client.secretGroups.update("id", {
     *         secrets: [{
     *                 key: "key"
     *             }]
     *     })
     */
    public update(
        id: string,
        request: TrueFoundry.UpdateSecretGroupRequest,
        requestOptions?: SecretGroups.RequestOptions,
    ): core.HttpResponsePromise<TrueFoundry.GetSecretGroupResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(id, request, requestOptions));
    }

    private async __update(
        id: string,
        request: TrueFoundry.UpdateSecretGroupRequest,
        requestOptions?: SecretGroups.RequestOptions,
    ): Promise<core.WithRawResponse<TrueFoundry.GetSecretGroupResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `api/svc/v1/secret-groups/${encodeURIComponent(id)}`,
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "truefoundry-sdk",
                "X-Fern-SDK-Version": "0.1.6",
                "User-Agent": "truefoundry-sdk/0.1.6",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as TrueFoundry.GetSecretGroupResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new TrueFoundry.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new TrueFoundry.ForbiddenError(
                        _response.error.body as TrueFoundry.HttpError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new TrueFoundry.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new TrueFoundry.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling PUT /api/svc/v1/secret-groups/{id}.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes the secret group, its associated secrets and secret versions of those secrets.
     *
     * @param {string} id - Secret Id of the secret group.
     * @param {SecretGroups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.ForbiddenError}
     * @throws {@link TrueFoundry.NotFoundError}
     *
     * @example
     *     await client.secretGroups.delete("id")
     */
    public delete(
        id: string,
        requestOptions?: SecretGroups.RequestOptions,
    ): core.HttpResponsePromise<TrueFoundry.DeleteSecretGroupResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(id, requestOptions));
    }

    private async __delete(
        id: string,
        requestOptions?: SecretGroups.RequestOptions,
    ): Promise<core.WithRawResponse<TrueFoundry.DeleteSecretGroupResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `api/svc/v1/secret-groups/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "truefoundry-sdk",
                "X-Fern-SDK-Version": "0.1.6",
                "User-Agent": "truefoundry-sdk/0.1.6",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as TrueFoundry.DeleteSecretGroupResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new TrueFoundry.ForbiddenError(
                        _response.error.body as TrueFoundry.HttpError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new TrueFoundry.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling DELETE /api/svc/v1/secret-groups/{id}.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["TFY_API_KEY"];
        if (bearer == null) {
            throw new errors.TrueFoundryError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a TFY_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
