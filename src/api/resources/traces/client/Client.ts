/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core/index.js";
import * as TrueFoundry from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Traces {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

export class Traces {
    protected readonly _options: Traces.Options;

    constructor(_options: Traces.Options) {
        this._options = _options;
    }

    /**
     * @param {TrueFoundry.QuerySpansRequest} request
     * @param {Traces.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.traces.querySpans({
     *         startTime: "startTime",
     *         tracingProjectFqn: "tracingProjectFqn"
     *     })
     */
    public async querySpans(
        request: TrueFoundry.QuerySpansRequest,
        requestOptions?: Traces.RequestOptions,
    ): Promise<core.Page<TrueFoundry.TraceSpan>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: TrueFoundry.QuerySpansRequest,
            ): Promise<core.WithRawResponse<TrueFoundry.QuerySpansResponse>> => {
                let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
                    this._options?.headers,
                    mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                    requestOptions?.headers,
                );
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)),
                        "api/svc/v1/spans/query",
                    ),
                    method: "POST",
                    headers: _headers,
                    contentType: "application/json",
                    queryParameters: requestOptions?.queryParams,
                    requestType: "json",
                    body: request,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as TrueFoundry.QuerySpansResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.TrueFoundryError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.TrueFoundryTimeoutError(
                            "Timeout exceeded when calling POST /api/svc/v1/spans/query.",
                        );
                    case "unknown":
                        throw new errors.TrueFoundryError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<TrueFoundry.QuerySpansResponse, TrueFoundry.TraceSpan>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.pagination.nextPageToken != null &&
                !(typeof response?.pagination.nextPageToken === "string" && response?.pagination.nextPageToken === ""),
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "pageToken", response?.pagination.nextPageToken));
            },
        });
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["TFY_API_KEY"];
        if (bearer == null) {
            throw new errors.TrueFoundryError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a TFY_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
