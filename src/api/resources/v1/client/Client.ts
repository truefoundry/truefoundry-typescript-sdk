/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as TrueFoundry from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";
import { Artifacts } from "../resources/artifacts/client/Client";
import { Agents } from "../resources/agents/client/Client";
import { Prompts } from "../resources/prompts/client/Client";
import { Tools } from "../resources/tools/client/Client";
import { Models } from "../resources/models/client/Client";
import { ArtifactVersions } from "../resources/artifactVersions/client/Client";
import { ModelVersions } from "../resources/modelVersions/client/Client";
import { PromptVersions } from "../resources/promptVersions/client/Client";
import { ToolVersions } from "../resources/toolVersions/client/Client";
import { AgentVersions } from "../resources/agentVersions/client/Client";
import { DataDirectories } from "../resources/dataDirectories/client/Client";
import { MlRepos } from "../resources/mlRepos/client/Client";

export declare namespace V1 {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class V1 {
    protected _artifacts: Artifacts | undefined;
    protected _agents: Agents | undefined;
    protected _prompts: Prompts | undefined;
    protected _tools: Tools | undefined;
    protected _models: Models | undefined;
    protected _artifactVersions: ArtifactVersions | undefined;
    protected _modelVersions: ModelVersions | undefined;
    protected _promptVersions: PromptVersions | undefined;
    protected _toolVersions: ToolVersions | undefined;
    protected _agentVersions: AgentVersions | undefined;
    protected _dataDirectories: DataDirectories | undefined;
    protected _mlRepos: MlRepos | undefined;

    constructor(protected readonly _options: V1.Options) {}

    public get artifacts(): Artifacts {
        return (this._artifacts ??= new Artifacts(this._options));
    }

    public get agents(): Agents {
        return (this._agents ??= new Agents(this._options));
    }

    public get prompts(): Prompts {
        return (this._prompts ??= new Prompts(this._options));
    }

    public get tools(): Tools {
        return (this._tools ??= new Tools(this._options));
    }

    public get models(): Models {
        return (this._models ??= new Models(this._options));
    }

    public get artifactVersions(): ArtifactVersions {
        return (this._artifactVersions ??= new ArtifactVersions(this._options));
    }

    public get modelVersions(): ModelVersions {
        return (this._modelVersions ??= new ModelVersions(this._options));
    }

    public get promptVersions(): PromptVersions {
        return (this._promptVersions ??= new PromptVersions(this._options));
    }

    public get toolVersions(): ToolVersions {
        return (this._toolVersions ??= new ToolVersions(this._options));
    }

    public get agentVersions(): AgentVersions {
        return (this._agentVersions ??= new AgentVersions(this._options));
    }

    public get dataDirectories(): DataDirectories {
        return (this._dataDirectories ??= new DataDirectories(this._options));
    }

    public get mlRepos(): MlRepos {
        return (this._mlRepos ??= new MlRepos(this._options));
    }

    /**
     * @param {TrueFoundry.ApplyRequest} request
     * @param {V1.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.UnprocessableEntityError}
     *
     * @example
     *     await client.v1.apply({
     *         manifest: {
     *             metadata: {
     *                 "key": "value"
     *             },
     *             type: "model-version",
     *             source: {
     *                 type: "truefoundry"
     *             }
     *         }
     *     })
     */
    public async apply(
        request: TrueFoundry.ApplyRequest,
        requestOptions?: V1.RequestOptions,
    ): Promise<TrueFoundry.ApplyResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "api/ml/v1/apply",
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "truefoundry-sdk",
                "X-Fern-SDK-Version": "0.0.3",
                "User-Agent": "truefoundry-sdk/0.0.3",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as TrueFoundry.ApplyResponse;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new TrueFoundry.UnprocessableEntityError(
                        _response.error.body as TrueFoundry.HttpValidationError,
                    );
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError("Timeout exceeded when calling PUT /api/ml/v1/apply.");
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["TFY_API_KEY"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
