/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../../../core";
import * as TrueFoundry from "../../../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../../../errors/index";

export declare namespace PersonalAccessTokens {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class PersonalAccessTokens {
    constructor(protected readonly _options: PersonalAccessTokens.Options) {}

    /**
     * List Personal Access Tokens created by the user in the current tenant.
     *
     * @param {TrueFoundry.v1.PersonalAccessTokensListRequest} request
     * @param {PersonalAccessTokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.v1.personalAccessTokens.list({
     *         limit: 10,
     *         offset: 0
     *     })
     */
    public async list(
        request: TrueFoundry.v1.PersonalAccessTokensListRequest = {},
        requestOptions?: PersonalAccessTokens.RequestOptions,
    ): Promise<core.Page<TrueFoundry.VirtualAccount>> {
        const list = async (
            request: TrueFoundry.v1.PersonalAccessTokensListRequest,
        ): Promise<TrueFoundry.ListPersonalAccessTokenResponse> => {
            const { limit, offset } = request;
            const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
            if (limit != null) {
                _queryParams["limit"] = limit.toString();
            }
            if (offset != null) {
                _queryParams["offset"] = offset.toString();
            }
            const _response = await (this._options.fetcher ?? core.fetcher)({
                url: urlJoin(
                    (await core.Supplier.get(this._options.baseUrl)) ??
                        (await core.Supplier.get(this._options.environment)),
                    "api/svc/v1/personal-access-tokens",
                ),
                method: "GET",
                headers: {
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "truefoundry-sdk",
                    "X-Fern-SDK-Version": "0.0.16",
                    "User-Agent": "truefoundry-sdk/0.0.16",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                    ...requestOptions?.headers,
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions?.maxRetries,
                abortSignal: requestOptions?.abortSignal,
            });
            if (_response.ok) {
                return _response.body as TrueFoundry.ListPersonalAccessTokenResponse;
            }
            if (_response.error.reason === "status-code") {
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.TrueFoundryTimeoutError(
                        "Timeout exceeded when calling GET /api/svc/v1/personal-access-tokens.",
                    );
                case "unknown":
                    throw new errors.TrueFoundryError({
                        message: _response.error.errorMessage,
                    });
            }
        };
        let _offset = request?.offset != null ? request?.offset : 0;
        return new core.Pageable<TrueFoundry.ListPersonalAccessTokenResponse, TrueFoundry.VirtualAccount>({
            response: await list(request),
            hasNextPage: (response) => (response?.data ?? []).length > 0,
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                _offset += response?.data != null ? response.data.length : 1;
                return list(core.setObjectProperty(request, "offset", _offset));
            },
        });
    }

    /**
     * Create Personal Access Token
     *
     * @param {TrueFoundry.v1.CreatePersonalAccessTokenRequest} request
     * @param {PersonalAccessTokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.BadRequestError}
     * @throws {@link TrueFoundry.ConflictError}
     *
     * @example
     *     await client.v1.personalAccessTokens.create({
     *         name: "name"
     *     })
     */
    public async create(
        request: TrueFoundry.v1.CreatePersonalAccessTokenRequest,
        requestOptions?: PersonalAccessTokens.RequestOptions,
    ): Promise<TrueFoundry.CreatePersonalAccessTokenResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "api/svc/v1/personal-access-tokens",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "truefoundry-sdk",
                "X-Fern-SDK-Version": "0.0.16",
                "User-Agent": "truefoundry-sdk/0.0.16",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as TrueFoundry.CreatePersonalAccessTokenResponse;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new TrueFoundry.BadRequestError(_response.error.body as unknown);
                case 409:
                    throw new TrueFoundry.ConflictError(_response.error.body as TrueFoundry.HttpError);
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling POST /api/svc/v1/personal-access-tokens.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Delete Personal Access Token associated with the provided serviceAccountId
     *
     * @param {string} id - serviceaccount id
     * @param {PersonalAccessTokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TrueFoundry.NotFoundError}
     *
     * @example
     *     await client.v1.personalAccessTokens.delete("id")
     */
    public async delete(
        id: string,
        requestOptions?: PersonalAccessTokens.RequestOptions,
    ): Promise<TrueFoundry.DeletePersonalAccessTokenResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `api/svc/v1/personal-access-tokens/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "truefoundry-sdk",
                "X-Fern-SDK-Version": "0.0.16",
                "User-Agent": "truefoundry-sdk/0.0.16",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as TrueFoundry.DeletePersonalAccessTokenResponse;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new TrueFoundry.NotFoundError(_response.error.body as unknown);
                default:
                    throw new errors.TrueFoundryError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TrueFoundryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.TrueFoundryTimeoutError(
                    "Timeout exceeded when calling DELETE /api/svc/v1/personal-access-tokens/{id}.",
                );
            case "unknown":
                throw new errors.TrueFoundryError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["TFY_API_KEY"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
