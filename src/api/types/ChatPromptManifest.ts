/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as TrueFoundry from "../index.js";

/**
 * Chat Prompt manifest.
 */
export interface ChatPromptManifest {
    /** Name of the entity */
    name: string;
    description?: string;
    /** Key value metadata. Should be valid JSON. For e.g. `{"business-unit": "sales", "quality": "good", "rating": 4.5}` */
    metadata: Record<string, unknown>;
    /** Version alias is alternate, ideally human readable, version string to reference an artifact version. It should start with `v` followed by alphanumeric and it can include `.` and `-` in between (e.g. `v1.0.0`, `v1-prod`, `v3-dev`, etc) */
    versionAlias?: string;
    /** Name of the ML Repo */
    mlRepo: string;
    /** Version of the entity */
    version?: number;
    type: "chat_prompt";
    /** List of messages in the chat conversation, must be non-empty */
    messages: ChatPromptManifest.Messages.Item[];
    /** Variables referenced in messages and that can be replaced when running generation */
    variables?: Record<string, string>;
    modelConfiguration?: TrueFoundry.ModelConfiguration;
    /** List of tools to be used in the chat prompt */
    tools?: TrueFoundry.ToolSchema[];
    /** A list of MCP servers FQNs or URLs and their tools */
    mcpServers?: ChatPromptManifest.McpServers.Item[];
    guardrails?: TrueFoundry.Guardrails;
}

export namespace ChatPromptManifest {
    export type Messages = Messages.Item[];

    export namespace Messages {
        export type Item =
            | TrueFoundry.SystemMessage
            | TrueFoundry.AssistantMessage
            | TrueFoundry.UserMessage
            | TrueFoundry.ToolMessage
            | TrueFoundry.DeveloperMessage;
    }

    export type McpServers = McpServers.Item[];

    export namespace McpServers {
        export type Item = TrueFoundry.McpServerWithFqn | TrueFoundry.McpServerWithUrl;
    }
}
