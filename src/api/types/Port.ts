/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as TrueFoundry from "../index.js";

/**
 * +docs=Describes the ports the service should be exposed to.
 */
export interface Port {
    /** +usage=Port number to expose. */
    port: number;
    /** +usage=Protocol for the port. */
    protocol: Port.Protocol;
    /** +usage=Expose the port */
    expose: boolean;
    /**
     * +label=Application Protocol
     * +usage=Application Protocol for the port.
     * Select the application protocol used by your service. For most use cases, this should be `http`(HTTP/1.1).
     * If you are running a gRPC server, select the `grpc` option.
     * This is only applicable if `expose=true`.
     */
    appProtocol?: Port.AppProtocol;
    /**
     * +usage=Host e.g. ai.example.com, app.truefoundry.com
     * +message=Upto 253 characters, each part of host should be at most 63 characters long, can contain alphabets, digits and hypen, must begin and end with an alphanumeric characters. Parts must be separated by periods (.)
     */
    host?: string;
    /**
     * +usage=Path e.g. /v1/api/ml/, /v2/docs/
     * +message=Should begin and end with a forward slash (/). Each part can can contain alphabets, digits and hypen, must begin and end with an alphanumeric characters. Parts should be separated by forward slashes (/)
     */
    path?: string;
    /**
     * +label=Rewrite Path to
     * +usage=Rewrite the path prefix to a different path.
     * If `path` is `/v1/api` and `rewrite_path_to` is `/api`. The URI in the HTTP request `http://0.0.0.0:8080/v1/api/houses` will be rewritten to `http://0.0.0.0:8080/api/houses` before the request is forwarded your service.
     * Defaults to `/`.
     * This is only applicable if `path` is given.
     * +message=Should begin and end with a forward slash (/). Each part can can contain alphabets, digits and hypen, must begin and end with an alphanumeric characters. Parts should be separated by forward slashes (/)
     */
    rewritePathTo?: string;
    /** +usage=Authentication method for inbound traffic */
    auth?: Port.Auth;
}

export namespace Port {
    /**
     * +usage=Protocol for the port.
     */
    export type Protocol = "TCP" | "UDP";
    export const Protocol = {
        Tcp: "TCP",
        Udp: "UDP",
    } as const;
    /**
     * +label=Application Protocol
     * +usage=Application Protocol for the port.
     * Select the application protocol used by your service. For most use cases, this should be `http`(HTTP/1.1).
     * If you are running a gRPC server, select the `grpc` option.
     * This is only applicable if `expose=true`.
     */
    export type AppProtocol = "http" | "grpc" | "tcp";
    export const AppProtocol = {
        Http: "http",
        Grpc: "grpc",
        Tcp: "tcp",
    } as const;
    /**
     * +usage=Authentication method for inbound traffic
     */
    export type Auth = TrueFoundry.BasicAuthCreds | TrueFoundry.JwtAuthConfig | TrueFoundry.TrueFoundryInteractiveLogin;
}
