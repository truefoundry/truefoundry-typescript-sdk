/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { TrueFoundryClient } from "../../src/Client";
import * as TrueFoundry from "../../src/api/index";

describe("Alerts", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                key: [
                    {
                        name: "name",
                        timestamps: ["2024-01-15T09:30:00Z"],
                        startTime: "2024-01-15T09:30:00Z",
                        clusterId: "clusterId",
                        fingerprint: "fingerprint",
                    },
                ],
            },
        };
        server.mockEndpoint().get("/api/svc/v1/alerts").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.alerts.list({
            startTs: "startTs",
            endTs: "endTs",
            clusterId: "clusterId",
            applicationId: "applicationId",
            alertStatus: "firing",
        });
        expect(response).toEqual({
            data: {
                key: [
                    {
                        name: "name",
                        timestamps: ["2024-01-15T09:30:00Z"],
                        startTime: "2024-01-15T09:30:00Z",
                        clusterId: "clusterId",
                        fingerprint: "fingerprint",
                    },
                ],
            },
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/api/svc/v1/alerts").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.alerts.list();
        }).rejects.toThrow(TrueFoundry.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { statusCode: 1, message: "message", code: undefined, details: undefined };
        server.mockEndpoint().get("/api/svc/v1/alerts").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.alerts.list();
        }).rejects.toThrow(TrueFoundry.ForbiddenError);
    });
});
