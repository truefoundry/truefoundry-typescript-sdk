/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { TrueFoundryClient } from "../../src/Client";
import * as TrueFoundry from "../../src/api/index";

describe("ArtifactVersions", () => {
    test("apply_tags (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { artifact_version_id: "artifact_version_id", tags: ["tags"] };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .put("/api/ml/v1/artifact-versions/tags")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.artifactVersions.applyTags({
            artifact_version_id: "artifact_version_id",
            tags: ["tags"],
        });
        expect(response).toEqual({});
    });

    test("apply_tags (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { artifact_version_id: "artifact_version_id", tags: ["tags", "tags"], force: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/api/ml/v1/artifact-versions/tags")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.artifactVersions.applyTags({
                artifact_version_id: "artifact_version_id",
                tags: ["tags", "tags"],
                force: undefined,
            });
        }).rejects.toThrow(TrueFoundry.UnprocessableEntityError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                id: "id",
                fqn: "fqn",
                created_by_subject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                manifest: {
                    name: "name",
                    description: "description",
                    metadata: { key: "value" },
                    version_alias: "version_alias",
                    ml_repo: "ml_repo",
                    version: 1,
                    type: "artifact-version",
                    source: { type: "truefoundry" },
                    step: 1,
                    run_id: "run_id",
                },
                usage_code_snippet: "usage_code_snippet",
                ml_repo_id: "ml_repo_id",
                tags: ["tags"],
                artifact_id: "artifact_id",
            },
        };
        server
            .mockEndpoint()
            .get("/api/ml/v1/artifact-versions/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.artifactVersions.get("id");
        expect(response).toEqual({
            data: {
                id: "id",
                fqn: "fqn",
                created_by_subject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                manifest: {
                    name: "name",
                    description: "description",
                    metadata: {
                        key: "value",
                    },
                    version_alias: "version_alias",
                    ml_repo: "ml_repo",
                    version: 1,
                    type: "artifact-version",
                    source: {
                        type: "truefoundry",
                    },
                    step: 1,
                    run_id: "run_id",
                },
                usage_code_snippet: "usage_code_snippet",
                ml_repo_id: "ml_repo_id",
                tags: ["tags"],
                artifact_id: "artifact_id",
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/api/ml/v1/artifact-versions/id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.artifactVersions.get("id");
        }).rejects.toThrow(TrueFoundry.UnprocessableEntityError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .delete("/api/ml/v1/artifact-versions/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.artifactVersions.delete("id");
        expect(response).toEqual({});
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/api/ml/v1/artifact-versions/id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.artifactVersions.delete("id");
        }).rejects.toThrow(TrueFoundry.UnprocessableEntityError);
    });

    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    fqn: "fqn",
                    created_by_subject: { subjectId: "subjectId", subjectType: "user" },
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    manifest: {
                        name: "name",
                        metadata: { key: "value" },
                        ml_repo: "ml_repo",
                        type: "artifact-version",
                        source: { type: "truefoundry" },
                    },
                    usage_code_snippet: "usage_code_snippet",
                    ml_repo_id: "ml_repo_id",
                    tags: ["tags"],
                    artifact_id: "artifact_id",
                },
            ],
            pagination: { total: 100, offset: 0, limit: 10 },
        };
        server
            .mockEndpoint()
            .get("/api/ml/v1/artifact-versions")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            data: [
                {
                    id: "id",
                    fqn: "fqn",
                    created_by_subject: {
                        subjectId: "subjectId",
                        subjectType: "user",
                    },
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    manifest: {
                        name: "name",
                        metadata: {
                            key: "value",
                        },
                        ml_repo: "ml_repo",
                        type: "artifact-version",
                        source: {
                            type: "truefoundry",
                        },
                    },
                    usage_code_snippet: "usage_code_snippet",
                    ml_repo_id: "ml_repo_id",
                    tags: ["tags"],
                    artifact_id: "artifact_id",
                },
            ],
            pagination: {
                total: 100,
                offset: 0,
                limit: 10,
            },
        };
        const page = await client.artifactVersions.list({
            tag: "tag",
            fqn: "fqn",
            artifact_id: "artifact_id",
            ml_repo_id: "ml_repo_id",
            name: "name",
            version: 1,
            offset: 1,
            limit: 1,
            include_internal_metadata: true,
        });

        expect(expected.data).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.data).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/api/ml/v1/artifact-versions")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.artifactVersions.list();
        }).rejects.toThrow(TrueFoundry.UnprocessableEntityError);
    });

    test("get_signed_urls (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id", paths: ["paths"], operation: "READ" };
        const rawResponseBody = { data: [{ path: "path", signed_url: "signed_url" }] };
        server
            .mockEndpoint()
            .post("/api/ml/v1/artifact-versions/signed-urls")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.artifactVersions.getSignedUrls({
            id: "id",
            paths: ["paths"],
            operation: "READ",
        });
        expect(response).toEqual({
            data: [
                {
                    path: "path",
                    signed_url: "signed_url",
                },
            ],
        });
    });

    test("get_signed_urls (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id", paths: ["paths", "paths"], operation: "READ" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/api/ml/v1/artifact-versions/signed-urls")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.artifactVersions.getSignedUrls({
                id: "id",
                paths: ["paths", "paths"],
                operation: "READ",
            });
        }).rejects.toThrow(TrueFoundry.UnprocessableEntityError);
    });

    test("create_multi_part_upload (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id", path: "path", num_parts: 1 };
        const rawResponseBody = {
            data: {
                storage_provider: "S3_COMPATIBLE",
                part_signed_urls: [{ path: "path", signed_url: "signed_url" }],
                s3_compatible_upload_id: "s3_compatible_upload_id",
                azure_blob_block_ids: ["azure_blob_block_ids"],
                finalize_signed_url: { path: "path", signed_url: "signed_url" },
            },
        };
        server
            .mockEndpoint()
            .post("/api/ml/v1/artifact-versions/signed-urls/multipart")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.artifactVersions.createMultiPartUpload({
            id: "id",
            path: "path",
            num_parts: 1,
        });
        expect(response).toEqual({
            data: {
                storage_provider: "S3_COMPATIBLE",
                part_signed_urls: [
                    {
                        path: "path",
                        signed_url: "signed_url",
                    },
                ],
                s3_compatible_upload_id: "s3_compatible_upload_id",
                azure_blob_block_ids: ["azure_blob_block_ids"],
                finalize_signed_url: {
                    path: "path",
                    signed_url: "signed_url",
                },
            },
        });
    });

    test("create_multi_part_upload (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id", path: "path", num_parts: 1 };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/api/ml/v1/artifact-versions/signed-urls/multipart")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.artifactVersions.createMultiPartUpload({
                id: "id",
                path: "path",
                num_parts: 1,
            });
        }).rejects.toThrow(TrueFoundry.UnprocessableEntityError);
    });

    test("stage (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            manifest: {
                name: "name",
                metadata: { key: "value" },
                ml_repo: "ml_repo",
                type: "model-version",
                source: { type: "truefoundry" },
            },
        };
        const rawResponseBody = { id: "id", storage_root: "storage_root", artifact_id: "artifact_id" };
        server
            .mockEndpoint()
            .post("/api/ml/v1/artifact-versions/stage")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.artifactVersions.stage({
            manifest: {
                name: "name",
                metadata: {
                    key: "value",
                },
                ml_repo: "ml_repo",
                type: "model-version",
                source: {
                    type: "truefoundry",
                },
            },
        });
        expect(response).toEqual({
            id: "id",
            storage_root: "storage_root",
            artifact_id: "artifact_id",
        });
    });

    test("stage (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            manifest: {
                name: "name",
                description: undefined,
                metadata: { metadata: { key: "value" } },
                version_alias: undefined,
                ml_repo: "ml_repo",
                version: undefined,
                type: "model-version",
                source: { type: "truefoundry", uri: undefined },
                framework: undefined,
                environment: undefined,
                step: undefined,
                run_id: undefined,
            },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/api/ml/v1/artifact-versions/stage")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.artifactVersions.stage({
                manifest: {
                    name: "name",
                    description: undefined,
                    metadata: {
                        metadata: {
                            key: "value",
                        },
                    },
                    version_alias: undefined,
                    ml_repo: "ml_repo",
                    version: undefined,
                    type: "model-version",
                    source: {
                        type: "truefoundry",
                        uri: undefined,
                    },
                    framework: undefined,
                    environment: undefined,
                    step: undefined,
                    run_id: undefined,
                },
            });
        }).rejects.toThrow(TrueFoundry.UnprocessableEntityError);
    });

    test("list_files (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id" };
        const rawResponseBody = {
            data: [
                {
                    path: "path",
                    is_dir: true,
                    file_size: 1,
                    signed_url: "signed_url",
                    last_modified: "2024-01-15T09:30:00Z",
                },
            ],
            pagination: {
                limit: 10,
                nextPageToken: "eyJlbmRUaW1lIjoiMjAyNS0wMy0xMlQwMDoxMDowMC4wMDBaIiwidHJhY2VJZCI6IjEyMzQ1Njc4OTAifQ==",
                previousPageToken:
                    "eyJlbmRUaW1lIjoiMjAyNS0wMy0xMlQwMDowMDowMC4wMDBaIiwidHJhY2VJZCI6IjEyMzQ1Njc4OTAifQ==",
            },
        };
        server
            .mockEndpoint()
            .post("/api/ml/v1/artifact-versions/files")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            data: [
                {
                    path: "path",
                    is_dir: true,
                    file_size: 1,
                    signed_url: "signed_url",
                    last_modified: "2024-01-15T09:30:00Z",
                },
            ],
            pagination: {
                limit: 10,
                nextPageToken: "eyJlbmRUaW1lIjoiMjAyNS0wMy0xMlQwMDoxMDowMC4wMDBaIiwidHJhY2VJZCI6IjEyMzQ1Njc4OTAifQ==",
                previousPageToken:
                    "eyJlbmRUaW1lIjoiMjAyNS0wMy0xMlQwMDowMDowMC4wMDBaIiwidHJhY2VJZCI6IjEyMzQ1Njc4OTAifQ==",
            },
        };
        const page = await client.artifactVersions.listFiles({
            id: "id",
        });

        expect(expected.data).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.data).toEqual(nextPage.data);
    });

    test("list_files (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id", path: undefined, limit: undefined, pageToken: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/api/ml/v1/artifact-versions/files")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.artifactVersions.listFiles({
                id: "id",
                path: undefined,
                limit: undefined,
                pageToken: undefined,
            });
        }).rejects.toThrow(TrueFoundry.UnprocessableEntityError);
    });

    test("mark_stage_failure (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id" };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/api/ml/v1/artifact-versions/mark-stage-failure")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.artifactVersions.markStageFailure({
            id: "id",
        });
        expect(response).toEqual({});
    });

    test("mark_stage_failure (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/api/ml/v1/artifact-versions/mark-stage-failure")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.artifactVersions.markStageFailure({
                id: "id",
            });
        }).rejects.toThrow(TrueFoundry.UnprocessableEntityError);
    });
});
