/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { TrueFoundryClient } from "../../src/Client";

describe("DataDirectories", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                id: "id",
                ml_repo_id: "ml_repo_id",
                name: "name",
                fqn: "fqn",
                created_by_subject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                manifest: {
                    type: "data-dir",
                    name: "name",
                    ml_repo: "ml_repo",
                    description: "description",
                    metadata: { key: "value" },
                    source: { type: "truefoundry" },
                },
                usage_code_snippet: "usage_code_snippet",
            },
        };
        server
            .mockEndpoint()
            .get("/api/ml/v1/data-directories/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dataDirectories.get("id");
        expect(response).toEqual({
            data: {
                id: "id",
                mlRepoId: "ml_repo_id",
                name: "name",
                fqn: "fqn",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                createdAt: new Date("2024-01-15T09:30:00.000Z"),
                updatedAt: new Date("2024-01-15T09:30:00.000Z"),
                manifest: {
                    type: "data-dir",
                    name: "name",
                    mlRepo: "ml_repo",
                    description: "description",
                    metadata: {
                        key: "value",
                    },
                    source: {
                        type: "truefoundry",
                    },
                },
                usageCodeSnippet: "usage_code_snippet",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .delete("/api/ml/v1/data-directories/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dataDirectories.delete("id");
        expect(response).toEqual({});
    });

    test("create_or_update", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            manifest: {
                type: "data-dir",
                name: "name",
                ml_repo: "ml_repo",
                metadata: { key: "value" },
                source: { type: "truefoundry" },
            },
        };
        const rawResponseBody = {
            data: {
                id: "id",
                ml_repo_id: "ml_repo_id",
                name: "name",
                fqn: "fqn",
                created_by_subject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                manifest: {
                    type: "data-dir",
                    name: "name",
                    ml_repo: "ml_repo",
                    description: "description",
                    metadata: { key: "value" },
                    source: { type: "truefoundry" },
                },
                usage_code_snippet: "usage_code_snippet",
            },
        };
        server
            .mockEndpoint()
            .put("/api/ml/v1/data-directories")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dataDirectories.createOrUpdate({
            manifest: {
                type: "data-dir",
                name: "name",
                mlRepo: "ml_repo",
                metadata: {
                    key: "value",
                },
                source: {
                    type: "truefoundry",
                },
            },
        });
        expect(response).toEqual({
            data: {
                id: "id",
                mlRepoId: "ml_repo_id",
                name: "name",
                fqn: "fqn",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                createdAt: new Date("2024-01-15T09:30:00.000Z"),
                updatedAt: new Date("2024-01-15T09:30:00.000Z"),
                manifest: {
                    type: "data-dir",
                    name: "name",
                    mlRepo: "ml_repo",
                    description: "description",
                    metadata: {
                        key: "value",
                    },
                    source: {
                        type: "truefoundry",
                    },
                },
                usageCodeSnippet: "usage_code_snippet",
            },
        });
    });

    test("delete_files", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id", paths: ["paths"] };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .delete("/api/ml/v1/data-directories/files")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dataDirectories.deleteFiles({
            id: "id",
            paths: ["paths"],
        });
        expect(response).toEqual({});
    });

    test("get_signed_urls", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id", paths: ["paths"], operation: "READ" };
        const rawResponseBody = { data: [{ path: "path", signed_url: "signed_url" }] };
        server
            .mockEndpoint()
            .post("/api/ml/v1/data-directories/signed-urls")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dataDirectories.getSignedUrls({
            id: "id",
            paths: ["paths"],
            operation: "READ",
        });
        expect(response).toEqual({
            data: [
                {
                    path: "path",
                    signedUrl: "signed_url",
                },
            ],
        });
    });

    test("create_multipart_upload", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id", path: "path", num_parts: 1 };
        const rawResponseBody = {
            data: {
                storage_provider: "S3_COMPATIBLE",
                part_signed_urls: [{ path: "path", signed_url: "signed_url" }],
                s3_compatible_upload_id: "s3_compatible_upload_id",
                azure_blob_block_ids: ["azure_blob_block_ids"],
                finalize_signed_url: { path: "path", signed_url: "signed_url" },
            },
        };
        server
            .mockEndpoint()
            .post("/api/ml/v1/data-directories/signed-urls/multipart")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dataDirectories.createMultipartUpload({
            id: "id",
            path: "path",
            numParts: 1,
        });
        expect(response).toEqual({
            data: {
                storageProvider: "S3_COMPATIBLE",
                partSignedUrls: [
                    {
                        path: "path",
                        signedUrl: "signed_url",
                    },
                ],
                s3CompatibleUploadId: "s3_compatible_upload_id",
                azureBlobBlockIds: ["azure_blob_block_ids"],
                finalizeSignedUrl: {
                    path: "path",
                    signedUrl: "signed_url",
                },
            },
        });
    });
});
