/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { TrueFoundryClient } from "../../src/Client";

describe("Environments", () => {
    test("create_or_update", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            manifest: { type: "environment", name: "name", color: {}, isProduction: true, optimizeFor: "COST" },
        };
        const rawResponseBody = {
            data: {
                id: "id",
                name: "name",
                priority: 1.1,
                color: {
                    colorHex: "colorHex",
                    backgroundColorHex: "backgroundColorHex",
                    color: "color",
                    backgroundColor: "backgroundColor",
                },
                tenantName: "tenantName",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                isProduction: true,
                optimizeFor: "COST",
                manifest: { type: "environment", name: "name", color: {}, isProduction: true, optimizeFor: "COST" },
                createdBy: "createdBy",
            },
        };
        server
            .mockEndpoint()
            .put("/api/svc/v1/environments")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.environments.createOrUpdate({
            manifest: {
                type: "environment",
                name: "name",
                color: {},
                isProduction: true,
                optimizeFor: "COST",
            },
        });
        expect(response).toEqual({
            data: {
                id: "id",
                name: "name",
                priority: 1.1,
                color: {
                    colorHex: "colorHex",
                    backgroundColorHex: "backgroundColorHex",
                    color: "color",
                    backgroundColor: "backgroundColor",
                },
                tenantName: "tenantName",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                isProduction: true,
                optimizeFor: "COST",
                manifest: {
                    type: "environment",
                    name: "name",
                    color: {},
                    isProduction: true,
                    optimizeFor: "COST",
                },
                createdBy: "createdBy",
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                id: "id",
                name: "name",
                priority: 1.1,
                color: {
                    colorHex: "colorHex",
                    backgroundColorHex: "backgroundColorHex",
                    color: "color",
                    backgroundColor: "backgroundColor",
                },
                tenantName: "tenantName",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                isProduction: true,
                optimizeFor: "COST",
                manifest: { type: "environment", name: "name", color: {}, isProduction: true, optimizeFor: "COST" },
                createdBy: "createdBy",
            },
        };
        server
            .mockEndpoint()
            .get("/api/svc/v1/environments/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.environments.get("id");
        expect(response).toEqual({
            data: {
                id: "id",
                name: "name",
                priority: 1.1,
                color: {
                    colorHex: "colorHex",
                    backgroundColorHex: "backgroundColorHex",
                    color: "color",
                    backgroundColor: "backgroundColor",
                },
                tenantName: "tenantName",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                isProduction: true,
                optimizeFor: "COST",
                manifest: {
                    type: "environment",
                    name: "name",
                    color: {},
                    isProduction: true,
                    optimizeFor: "COST",
                },
                createdBy: "createdBy",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = true;
        server
            .mockEndpoint()
            .delete("/api/svc/v1/environments/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.environments.delete("id");
        expect(response).toEqual(true);
    });
});
