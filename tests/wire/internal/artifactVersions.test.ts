/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { TrueFoundryClient } from "../../../src/Client";
import * as TrueFoundry from "../../../src/api/index";

describe("ArtifactVersions", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    fqn: "fqn",
                    created_by_subject: { subjectId: "subjectId", subjectType: "user" },
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    manifest: {
                        name: "name",
                        metadata: { key: "value" },
                        ml_repo: "ml_repo",
                        type: "artifact-version",
                        source: { type: "truefoundry" },
                    },
                    usage_code_snippet: "usage_code_snippet",
                    ml_repo_id: "ml_repo_id",
                    tags: ["tags"],
                    artifact_id: "artifact_id",
                    artifact_fqn: "artifact_fqn",
                    artifact_size: 1,
                },
            ],
            pagination: { total: 100, offset: 0, limit: 10 },
        };
        server
            .mockEndpoint()
            .get("/api/ml/v1/x/artifact-versions")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            data: [
                {
                    id: "id",
                    fqn: "fqn",
                    created_by_subject: {
                        subjectId: "subjectId",
                        subjectType: "user",
                    },
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    manifest: {
                        name: "name",
                        metadata: {
                            key: "value",
                        },
                        ml_repo: "ml_repo",
                        type: "artifact-version",
                        source: {
                            type: "truefoundry",
                        },
                    },
                    usage_code_snippet: "usage_code_snippet",
                    ml_repo_id: "ml_repo_id",
                    tags: ["tags"],
                    artifact_id: "artifact_id",
                    artifact_fqn: "artifact_fqn",
                    artifact_size: 1,
                },
            ],
            pagination: {
                total: 100,
                offset: 0,
                limit: 10,
            },
        };
        const page = await client.internal.artifactVersions.list({
            tag: "tag",
            fqn: "fqn",
            artifact_id: "artifact_id",
            ml_repo_id: "ml_repo_id",
            name: "name",
            version: 1,
            offset: 1,
            limit: 1,
            include_internal_metadata: true,
            include_model_versions: true,
        });

        expect(expected.data).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.data).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/api/ml/v1/x/artifact-versions")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.internal.artifactVersions.list();
        }).rejects.toThrow(TrueFoundry.UnprocessableEntityError);
    });
});
