/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { TrueFoundryClient } from "../../../src/Client";

describe("Deployments", () => {
    test("get_deployment_statuses", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                deploymentId: "deploymentId",
                status: "INITIALIZED",
                state: { key: "value" },
                transition: "BUILDING",
                message: "message",
                retryCount: 1.1,
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
            },
        ];
        server
            .mockEndpoint()
            .get("/api/svc/v1/apps/id/deployments/deploymentId/statuses")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.internal.deployments.getDeploymentStatuses("id", "deploymentId");
        expect(response).toEqual([
            {
                id: "id",
                deploymentId: "deploymentId",
                status: "INITIALIZED",
                state: {
                    key: "value",
                },
                transition: "BUILDING",
                message: "message",
                retryCount: 1.1,
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
            },
        ]);
    });

    test("get_builds", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                deploymentId: "deploymentId",
                componentName: "componentName",
                build: { name: "name", status: 20 },
                buildId: "buildId",
                imageUri: "imageUri",
                name: "name",
                status: "STARTED",
                getLogsUrl: "getLogsUrl",
                tailLogsUrl: "tailLogsUrl",
                logsStartTs: "logsStartTs",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
            },
        ];
        server
            .mockEndpoint()
            .get("/api/svc/v1/apps/id/deployments/deploymentId/builds")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.internal.deployments.getBuilds("id", "deploymentId");
        expect(response).toEqual([
            {
                id: "id",
                deploymentId: "deploymentId",
                componentName: "componentName",
                build: {
                    name: "name",
                    status: 20,
                },
                buildId: "buildId",
                imageUri: "imageUri",
                name: "name",
                status: "STARTED",
                getLogsUrl: "getLogsUrl",
                tailLogsUrl: "tailLogsUrl",
                logsStartTs: "logsStartTs",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
            },
        ]);
    });

    test("get_code_upload_url", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { serviceName: "serviceName", workspaceFqn: "workspaceFqn" };
        const rawResponseBody = { uri: "uri", url: "url", headers: { key: "value" } };
        server
            .mockEndpoint()
            .post("/api/svc/v1/deployment/code-upload-url")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.internal.deployments.getCodeUploadUrl({
            serviceName: "serviceName",
            workspaceFqn: "workspaceFqn",
        });
        expect(response).toEqual({
            uri: "uri",
            url: "url",
            headers: {
                key: "value",
            },
        });
    });

    test("get_suggested_endpoint", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            host: "host",
            path: "path",
            gateway: { uid: "uid", name: "name", hosts: ["hosts"], isTieBreaker: true, selector: { key: "value" } },
        };
        server
            .mockEndpoint()
            .get("/api/svc/v1/deployment/deployment-endpoint")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.internal.deployments.getSuggestedEndpoint({
            applicationType: "async-service",
            applicationName: "applicationName",
            workspaceId: "workspaceId",
        });
        expect(response).toEqual({
            host: "host",
            path: "path",
            gateway: {
                uid: "uid",
                name: "name",
                hosts: ["hosts"],
                isTieBreaker: true,
                selector: {
                    key: "value",
                },
            },
        });
    });
});
