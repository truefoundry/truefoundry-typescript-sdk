/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { TrueFoundryClient } from "../../../src/Client";
import * as TrueFoundry from "../../../src/api/index";

describe("Ml", () => {
    test("apply (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            manifest: {
                name: "name",
                metadata: { key: "value" },
                ml_repo: "ml_repo",
                type: "model-version",
                source: { type: "truefoundry" },
            },
        };
        const rawResponseBody = {
            data: {
                id: "id",
                fqn: "fqn",
                created_by_subject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                manifest: {
                    name: "name",
                    description: "description",
                    metadata: { key: "value" },
                    version_alias: "version_alias",
                    ml_repo: "ml_repo",
                    version: 1,
                    type: "model-version",
                    source: { type: "truefoundry" },
                    framework: { type: "transformers" },
                    step: 1,
                    run_id: "run_id",
                },
                usage_code_snippet: "usage_code_snippet",
                ml_repo_id: "ml_repo_id",
                tags: ["tags"],
                model_id: "model_id",
                metrics: [{ key: "key" }],
                deployable: true,
            },
        };
        server
            .mockEndpoint()
            .put("/api/ml/v1/apply")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.internal.ml.apply({
            manifest: {
                name: "name",
                metadata: {
                    key: "value",
                },
                ml_repo: "ml_repo",
                type: "model-version",
                source: {
                    type: "truefoundry",
                },
            },
        });
        expect(response).toEqual({
            data: {
                id: "id",
                fqn: "fqn",
                created_by_subject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                manifest: {
                    name: "name",
                    description: "description",
                    metadata: {
                        key: "value",
                    },
                    version_alias: "version_alias",
                    ml_repo: "ml_repo",
                    version: 1,
                    type: "model-version",
                    source: {
                        type: "truefoundry",
                    },
                    framework: {
                        type: "transformers",
                    },
                    step: 1,
                    run_id: "run_id",
                },
                usage_code_snippet: "usage_code_snippet",
                ml_repo_id: "ml_repo_id",
                tags: ["tags"],
                model_id: "model_id",
                metrics: [
                    {
                        key: "key",
                    },
                ],
                deployable: true,
            },
        });
    });

    test("apply (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            manifest: {
                name: "name",
                description: undefined,
                metadata: { metadata: { key: "value" } },
                version_alias: undefined,
                ml_repo: "ml_repo",
                version: undefined,
                type: "model-version",
                source: { type: "truefoundry", uri: undefined },
                framework: undefined,
                environment: undefined,
                step: undefined,
                run_id: undefined,
            },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/api/ml/v1/apply")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.internal.ml.apply({
                manifest: {
                    name: "name",
                    description: undefined,
                    metadata: {
                        metadata: {
                            key: "value",
                        },
                    },
                    version_alias: undefined,
                    ml_repo: "ml_repo",
                    version: undefined,
                    type: "model-version",
                    source: {
                        type: "truefoundry",
                        uri: undefined,
                    },
                    framework: undefined,
                    environment: undefined,
                    step: undefined,
                    run_id: undefined,
                },
            });
        }).rejects.toThrow(TrueFoundry.UnprocessableEntityError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            manifest: {
                name: "name",
                metadata: { key: "value" },
                ml_repo: "ml_repo",
                type: "model-version",
                source: { type: "truefoundry" },
            },
        };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/api/ml/v1/delete")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.internal.ml.delete({
            manifest: {
                name: "name",
                metadata: {
                    key: "value",
                },
                ml_repo: "ml_repo",
                type: "model-version",
                source: {
                    type: "truefoundry",
                },
            },
        });
        expect(response).toEqual({});
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            manifest: {
                name: "name",
                description: undefined,
                metadata: { metadata: { key: "value" } },
                version_alias: undefined,
                ml_repo: "ml_repo",
                version: undefined,
                type: "model-version",
                source: { type: "truefoundry", uri: undefined },
                framework: undefined,
                environment: undefined,
                step: undefined,
                run_id: undefined,
            },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/api/ml/v1/delete")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.internal.ml.delete({
                manifest: {
                    name: "name",
                    description: undefined,
                    metadata: {
                        metadata: {
                            key: "value",
                        },
                    },
                    version_alias: undefined,
                    ml_repo: "ml_repo",
                    version: undefined,
                    type: "model-version",
                    source: {
                        type: "truefoundry",
                        uri: undefined,
                    },
                    framework: undefined,
                    environment: undefined,
                    step: undefined,
                    run_id: undefined,
                },
            });
        }).rejects.toThrow(TrueFoundry.UnprocessableEntityError);
    });
});
