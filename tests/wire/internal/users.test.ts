/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { TrueFoundryClient } from "../../../src/Client";

describe("Users", () => {
    test("get_info", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            userName: "userName",
            subjectSlug: "subjectSlug",
            subjectControllerName: "subjectControllerName",
            subjectPatName: "subjectPatName",
            email: "email",
            subjectType: "user",
            tenantName: "tenantName",
            roles: ["roles"],
            teams: ["teams"],
            metadata: {
                sub: "sub",
                imageURL: "imageURL",
                displayName: "displayName",
                userObject: { key: "value" },
                inviteAccepted: true,
                registeredInIdp: true,
                preference: { key: "value" },
                groups: ["groups"],
                tenantRoleManagedBy: "manual",
                ssoName: "ssoName",
            },
        };
        server
            .mockEndpoint()
            .get("/api/svc/v1/users/info")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.internal.users.getInfo();
        expect(response).toEqual({
            id: "id",
            userName: "userName",
            subjectSlug: "subjectSlug",
            subjectControllerName: "subjectControllerName",
            subjectPatName: "subjectPatName",
            email: "email",
            subjectType: "user",
            tenantName: "tenantName",
            roles: ["roles"],
            teams: ["teams"],
            metadata: {
                sub: "sub",
                imageURL: "imageURL",
                displayName: "displayName",
                userObject: {
                    key: "value",
                },
                inviteAccepted: true,
                registeredInIdp: true,
                preference: {
                    key: "value",
                },
                groups: ["groups"],
                tenantRoleManagedBy: "manual",
                ssoName: "ssoName",
            },
        });
    });
});
