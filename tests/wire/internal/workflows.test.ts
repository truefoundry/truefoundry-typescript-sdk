/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { TrueFoundryClient } from "../../../src/Client";
import * as TrueFoundry from "../../../src/api/index";

describe("Workflows", () => {
    test("execute_workflow (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { executionName: "executionName" };
        server
            .mockEndpoint()
            .post("/api/svc/v1/workflow/applicationId/executions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.internal.workflows.executeWorkflow("applicationId");
        expect(response).toEqual({
            executionName: "executionName",
        });
    });

    test("execute_workflow (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { inputs: undefined, inputsLiteralMap: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/api/svc/v1/workflow/applicationId/executions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.internal.workflows.executeWorkflow("applicationId", {
                inputs: undefined,
                inputsLiteralMap: undefined,
            });
        }).rejects.toThrow(TrueFoundry.BadRequestError);
    });

    test("execute_workflow (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { inputs: undefined, inputsLiteralMap: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/api/svc/v1/workflow/applicationId/executions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.internal.workflows.executeWorkflow("applicationId", {
                inputs: undefined,
                inputsLiteralMap: undefined,
            });
        }).rejects.toThrow(TrueFoundry.NotFoundError);
    });
});
