/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { TrueFoundryClient } from "../../src/Client";

describe("Jobs", () => {
    test("get_run", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                name: "name",
                applicationName: "applicationName",
                deploymentVersion: "deploymentVersion",
                createdAt: 1.1,
                endTime: 1.1,
                duration: 1,
                command: "command",
                totalRetries: 1,
                error: "error",
                status: "CREATED",
                triggeredBy: "triggeredBy",
                triggeredBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                exitCode: 1,
                sparkUi: "sparkUi",
            },
        };
        server
            .mockEndpoint()
            .get("/api/svc/v1/jobs/jobId/runs/jobRunName")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.jobs.getRun("jobId", "jobRunName");
        expect(response).toEqual({
            data: {
                name: "name",
                applicationName: "applicationName",
                deploymentVersion: "deploymentVersion",
                createdAt: 1.1,
                endTime: 1.1,
                duration: 1,
                command: "command",
                totalRetries: 1,
                error: "error",
                status: "CREATED",
                triggeredBy: "triggeredBy",
                triggeredBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                exitCode: 1,
                sparkUi: "sparkUi",
            },
        });
    });

    test("delete_run", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { message: "message" };
        server
            .mockEndpoint()
            .delete("/api/svc/v1/jobs/jobId/runs/jobRunName")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.jobs.deleteRun("jobId", "jobRunName");
        expect(response).toEqual({
            message: "message",
        });
    });

    test("trigger", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            message: "message",
            jobRunName: "jobRunName",
            data: {
                name: "name",
                applicationName: "applicationName",
                deploymentVersion: "deploymentVersion",
                createdAt: 1.1,
                endTime: 1.1,
                duration: 1,
                command: "command",
                totalRetries: 1,
                error: "error",
                status: "CREATED",
                triggeredBy: "triggeredBy",
                triggeredBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                exitCode: 1,
                sparkUi: "sparkUi",
            },
        };
        server
            .mockEndpoint()
            .post("/api/svc/v1/jobs/trigger")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.jobs.trigger();
        expect(response).toEqual({
            message: "message",
            jobRunName: "jobRunName",
            data: {
                name: "name",
                applicationName: "applicationName",
                deploymentVersion: "deploymentVersion",
                createdAt: 1.1,
                endTime: 1.1,
                duration: 1,
                command: "command",
                totalRetries: 1,
                error: "error",
                status: "CREATED",
                triggeredBy: "triggeredBy",
                triggeredBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                exitCode: 1,
                sparkUi: "sparkUi",
            },
        });
    });

    test("terminate", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { message: "message", jobRunStatus: "CREATED" };
        server
            .mockEndpoint()
            .post("/api/svc/v1/jobs/terminate")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.jobs.terminate({
            deploymentId: "deploymentId",
            jobRunName: "jobRunName",
        });
        expect(response).toEqual({
            message: "message",
            jobRunStatus: "CREATED",
        });
    });
});
