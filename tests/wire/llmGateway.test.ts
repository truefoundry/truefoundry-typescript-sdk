/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { TrueFoundryClient } from "../../src/Client";

describe("LlmGateway", () => {
    test("svc.Metrics.getLLMPlaygroundTables", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};

        server
            .mockEndpoint()
            .post("/api/svc/v1/llm-gateway/metrics/tables")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.llmGateway.svcMetricsGetLlmPlaygroundTables();
        expect(response).toEqual(undefined);
    });

    test("svc.InferenceRequest.getFilterTypeAndLabelValues", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .get("/api/svc/v1/llm-gateway/requests/column-details")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.llmGateway.svcInferenceRequestGetFilterTypeAndLabelValues();
        expect(response).toEqual(undefined);
    });

    test("svc.MCPMetrics.getMCPMetricsCharts", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            charts: [
                {
                    name: "mcp_server_request",
                    display_name: "MCP Server Request",
                    description: "MCP Server Request",
                    chart_type: "line",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/api/svc/v1/llm-gateway/mcp-metrics/charts")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.llmGateway.svcMcpMetricsGetMcpMetricsCharts({
            page: "mcpserver",
        });
        expect(response).toEqual({
            charts: [
                {
                    name: "mcp_server_request",
                    display_name: "MCP Server Request",
                    description: "MCP Server Request",
                    chart_type: "line",
                },
            ],
        });
    });

    test("svc.MCPMetrics.getMCPMetricsFilters", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { filters: [{}] };
        server
            .mockEndpoint()
            .get("/api/svc/v1/llm-gateway/mcp-metrics/filters")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.llmGateway.svcMcpMetricsGetMcpMetricsFilters({
            startTime: 1710201609,
            endTime: 1710202200,
            page: "mcpserver",
        });
        expect(response).toEqual({
            filters: [{}],
        });
    });

    test("svc.MCPMetrics.getMCPMeters", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { page: "mcpserver" };
        const rawResponseBody = { aggregatedValues: { key: "value" } };
        server
            .mockEndpoint()
            .post("/api/svc/v1/llm-gateway/mcp-metrics/meters")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.llmGateway.svcMcpMetricsGetMcpMeters({
            page: "mcpserver",
        });
        expect(response).toEqual({
            aggregatedValues: {
                key: "value",
            },
        });
    });

    test("svc.MCPMetrics.getMCPMetricsChartsData", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { startTime: 1710201609, endTime: 1710202200, chartName: "rateOfRequestsPerMcpServer" };

        server
            .mockEndpoint()
            .post("/api/svc/v1/llm-gateway/mcp-metrics/chartsData")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.llmGateway.svcMcpMetricsGetMcpMetricsChartsData({
            startTime: 1710201609,
            endTime: 1710202200,
            chartName: "rateOfRequestsPerMcpServer",
        });
        expect(response).toEqual(undefined);
    });

    test("svc.GuardrailMetrics.getGuardrailMetricsCharts", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            charts: [
                {
                    name: "guardrail_request",
                    display_name: "Guardrail Request",
                    description: "Guardrail Request",
                    chart_type: "line",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/api/svc/v1/llm-gateway/guardrail-metrics/charts")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.llmGateway.svcGuardrailMetricsGetGuardrailMetricsCharts();
        expect(response).toEqual({
            charts: [
                {
                    name: "guardrail_request",
                    display_name: "Guardrail Request",
                    description: "Guardrail Request",
                    chart_type: "line",
                },
            ],
        });
    });

    test("svc.GuardrailMetrics.getGuardrailMetricsFilters", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { filters: [{}] };
        server
            .mockEndpoint()
            .get("/api/svc/v1/llm-gateway/guardrail-metrics/filters")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.llmGateway.svcGuardrailMetricsGetGuardrailMetricsFilters({
            startTime: 1710201609,
            endTime: 1710202200,
        });
        expect(response).toEqual({
            filters: [{}],
        });
    });

    test("svc.GuardrailMetrics.getGuardrailMeters", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { aggregatedValues: { key: "value" }, meters: [{ key: "value" }] };
        server
            .mockEndpoint()
            .post("/api/svc/v1/llm-gateway/guardrail-metrics/meters")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.llmGateway.svcGuardrailMetricsGetGuardrailMeters();
        expect(response).toEqual({
            aggregatedValues: {
                key: "value",
            },
            meters: [
                {
                    key: "value",
                },
            ],
        });
    });

    test("svc.GuardrailMetrics.getGuardrailMetricsChartsData", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { startTime: 1710201609, endTime: 1710202200, chartName: "rateOfRequestsPerGuardrail" };

        server
            .mockEndpoint()
            .post("/api/svc/v1/llm-gateway/guardrail-metrics/chartsData")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.llmGateway.svcGuardrailMetricsGetGuardrailMetricsChartsData({
            startTime: 1710201609,
            endTime: 1710202200,
            chartName: "rateOfRequestsPerGuardrail",
        });
        expect(response).toEqual(undefined);
    });
});
