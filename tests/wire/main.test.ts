/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { TrueFoundryClient } from "../../src/Client";

describe("TrueFoundryClient", () => {
    test("apply", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            manifest: {
                type: "ml-repo",
                name: "name",
                storage_integration_fqn: "storage_integration_fqn",
                collaborators: [{ subject: "subject", role_id: "role_id" }],
            },
        };
        const rawResponseBody = {
            existingManifest: {
                type: "ml-repo",
                name: "name",
                description: "description",
                storage_integration_fqn: "storage_integration_fqn",
                collaborators: [{ subject: "subject", role_id: "role_id" }],
            },
            action: "CREATE",
        };
        server
            .mockEndpoint()
            .put("/api/svc/v1/apply")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.apply({
            manifest: {
                type: "ml-repo",
                name: "name",
                storageIntegrationFqn: "storage_integration_fqn",
                collaborators: [
                    {
                        subject: "subject",
                        roleId: "role_id",
                    },
                ],
            },
        });
        expect(response).toEqual({
            existingManifest: {
                type: "ml-repo",
                name: "name",
                description: "description",
                storageIntegrationFqn: "storage_integration_fqn",
                collaborators: [
                    {
                        subject: "subject",
                        roleId: "role_id",
                    },
                ],
            },
            action: "CREATE",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            manifest: {
                type: "ml-repo",
                name: "name",
                storage_integration_fqn: "storage_integration_fqn",
                collaborators: [{ subject: "subject", role_id: "role_id" }],
            },
        };

        server.mockEndpoint().post("/api/svc/v1/delete").jsonBody(rawRequestBody).respondWith().statusCode(200).build();

        const response = await client.delete({
            manifest: {
                type: "ml-repo",
                name: "name",
                storageIntegrationFqn: "storage_integration_fqn",
                collaborators: [
                    {
                        subject: "subject",
                        roleId: "role_id",
                    },
                ],
            },
        });
        expect(response).toEqual(undefined);
    });
});
