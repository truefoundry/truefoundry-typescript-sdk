/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { TrueFoundryClient } from "../../src/Client";

describe("MlRepos", () => {
    test("create_or_update", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            manifest: {
                type: "ml-repo",
                name: "name",
                storage_integration_fqn: "storage_integration_fqn",
                collaborators: [{ subject: "subject", role_id: "role_id" }],
            },
        };
        const rawResponseBody = {
            data: {
                tenant_name: "truefoundry",
                manifest: {
                    type: "ml-repo",
                    name: "name",
                    description: "description",
                    storage_integration_fqn: "storage_integration_fqn",
                    collaborators: [{ subject: "subject", role_id: "role_id" }],
                },
                created_by_subject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                created_at: "2024-01-15T09:30:00Z",
                id: "420",
                num_runs: 10,
                artifact_type_counts: { key: 1 },
                datasets_count: 10,
            },
        };
        server
            .mockEndpoint()
            .put("/api/svc/v1/ml-repos")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mlRepos.createOrUpdate({
            manifest: {
                type: "ml-repo",
                name: "name",
                storageIntegrationFqn: "storage_integration_fqn",
                collaborators: [
                    {
                        subject: "subject",
                        roleId: "role_id",
                    },
                ],
            },
        });
        expect(response).toEqual({
            data: {
                tenantName: "truefoundry",
                manifest: {
                    type: "ml-repo",
                    name: "name",
                    description: "description",
                    storageIntegrationFqn: "storage_integration_fqn",
                    collaborators: [
                        {
                            subject: "subject",
                            roleId: "role_id",
                        },
                    ],
                },
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                createdAt: new Date("2024-01-15T09:30:00.000Z"),
                id: "420",
                numRuns: 10,
                artifactTypeCounts: {
                    key: 1,
                },
                datasetsCount: 10,
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                tenant_name: "truefoundry",
                manifest: {
                    type: "ml-repo",
                    name: "name",
                    description: "description",
                    storage_integration_fqn: "storage_integration_fqn",
                    collaborators: [{ subject: "subject", role_id: "role_id" }],
                },
                created_by_subject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                created_at: "2024-01-15T09:30:00Z",
                id: "420",
                num_runs: 10,
                artifact_type_counts: { key: 1 },
                datasets_count: 10,
            },
        };
        server
            .mockEndpoint()
            .get("/api/ml/v1/ml-repos/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mlRepos.get("id");
        expect(response).toEqual({
            data: {
                tenantName: "truefoundry",
                manifest: {
                    type: "ml-repo",
                    name: "name",
                    description: "description",
                    storageIntegrationFqn: "storage_integration_fqn",
                    collaborators: [
                        {
                            subject: "subject",
                            roleId: "role_id",
                        },
                    ],
                },
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                createdAt: new Date("2024-01-15T09:30:00.000Z"),
                id: "420",
                numRuns: 10,
                artifactTypeCounts: {
                    key: 1,
                },
                datasetsCount: 10,
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .delete("/api/ml/v1/ml-repos/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mlRepos.delete("id");
        expect(response).toEqual({});
    });
});
