/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { TrueFoundryClient } from "../../src/Client";

describe("Models", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                id: "id",
                ml_repo_id: "ml_repo_id",
                type: "model",
                name: "name",
                fqn: "fqn",
                created_by_subject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                latest_version: {
                    id: "id",
                    fqn: "fqn",
                    created_by_subject: { subjectId: "subjectId", subjectType: "user" },
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    manifest: {
                        name: "name",
                        metadata: { key: "value" },
                        ml_repo: "ml_repo",
                        type: "model-version",
                        source: { type: "truefoundry" },
                    },
                    usage_code_snippet: "usage_code_snippet",
                    ml_repo_id: "ml_repo_id",
                    model_id: "model_id",
                    metrics: [{ key: "key" }],
                    deployable: true,
                },
                run_steps: [1],
            },
        };
        server
            .mockEndpoint()
            .get("/api/ml/v1/models/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.models.get("id");
        expect(response).toEqual({
            data: {
                id: "id",
                ml_repo_id: "ml_repo_id",
                type: "model",
                name: "name",
                fqn: "fqn",
                created_by_subject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                created_at: new Date("2024-01-15T09:30:00.000Z"),
                updated_at: new Date("2024-01-15T09:30:00.000Z"),
                latest_version: {
                    id: "id",
                    fqn: "fqn",
                    created_by_subject: {
                        subjectId: "subjectId",
                        subjectType: "user",
                    },
                    created_at: new Date("2024-01-15T09:30:00.000Z"),
                    updated_at: new Date("2024-01-15T09:30:00.000Z"),
                    manifest: {
                        name: "name",
                        metadata: {
                            key: "value",
                        },
                        ml_repo: "ml_repo",
                        type: "model-version",
                        source: {
                            type: "truefoundry",
                        },
                    },
                    usage_code_snippet: "usage_code_snippet",
                    ml_repo_id: "ml_repo_id",
                    model_id: "model_id",
                    metrics: [
                        {
                            key: "key",
                        },
                    ],
                    deployable: true,
                },
                run_steps: [1],
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .delete("/api/ml/v1/models/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.models.delete("id");
        expect(response).toEqual({});
    });

    test("create_or_update", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            manifest: {
                name: "name",
                metadata: { key: "value" },
                ml_repo: "ml_repo",
                type: "model-version",
                source: { type: "truefoundry" },
            },
        };
        const rawResponseBody = {
            data: {
                id: "id",
                fqn: "fqn",
                created_by_subject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                manifest: {
                    name: "name",
                    description: "description",
                    metadata: { key: "value" },
                    version_alias: "version_alias",
                    ml_repo: "ml_repo",
                    version: 1,
                    type: "model-version",
                    source: { type: "truefoundry" },
                    framework: { type: "transformers" },
                    step: 1,
                    run_id: "run_id",
                },
                usage_code_snippet: "usage_code_snippet",
                ml_repo_id: "ml_repo_id",
                model_id: "model_id",
                metrics: [{ key: "key" }],
                deployable: true,
            },
        };
        server
            .mockEndpoint()
            .put("/api/ml/v1/model-versions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.models.createOrUpdate({
            manifest: {
                name: "name",
                metadata: {
                    key: "value",
                },
                ml_repo: "ml_repo",
                type: "model-version",
                source: {
                    type: "truefoundry",
                },
            },
        });
        expect(response).toEqual({
            data: {
                id: "id",
                fqn: "fqn",
                created_by_subject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                created_at: new Date("2024-01-15T09:30:00.000Z"),
                updated_at: new Date("2024-01-15T09:30:00.000Z"),
                manifest: {
                    name: "name",
                    description: "description",
                    metadata: {
                        key: "value",
                    },
                    version_alias: "version_alias",
                    ml_repo: "ml_repo",
                    version: 1,
                    type: "model-version",
                    source: {
                        type: "truefoundry",
                    },
                    framework: {
                        type: "transformers",
                    },
                    step: 1,
                    run_id: "run_id",
                },
                usage_code_snippet: "usage_code_snippet",
                ml_repo_id: "ml_repo_id",
                model_id: "model_id",
                metrics: [
                    {
                        key: "key",
                    },
                ],
                deployable: true,
            },
        });
    });
});
