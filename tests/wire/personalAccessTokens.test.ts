/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { TrueFoundryClient } from "../../src/Client";
import * as TrueFoundry from "../../src/api/index";

describe("PersonalAccessTokens", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    name: "name",
                    type: "type",
                    tenantName: "tenantName",
                    manifest: {
                        name: "name",
                        type: "virtual-account",
                        permissions: [
                            { resource_fqn: "resource_fqn", resource_type: "resource_type", role_id: "role_id" },
                        ],
                    },
                    createdBySubject: { subjectId: "subjectId", subjectType: "user" },
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    isExpired: true,
                    jwts: [
                        {
                            id: "id",
                            subjectType: "subjectType",
                            subjectId: "subjectId",
                            expiry: "2024-01-15T09:30:00Z",
                            createdAt: "2024-01-15T09:30:00Z",
                            updatedAt: "2024-01-15T09:30:00Z",
                        },
                    ],
                    createdBy: "createdBy",
                },
            ],
            pagination: { total: 100, offset: 0, limit: 10 },
        };
        server
            .mockEndpoint()
            .get("/api/svc/v1/personal-access-tokens")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            data: [
                {
                    id: "id",
                    name: "name",
                    type: "type",
                    tenantName: "tenantName",
                    manifest: {
                        name: "name",
                        type: "virtual-account",
                        permissions: [
                            {
                                resource_fqn: "resource_fqn",
                                resource_type: "resource_type",
                                role_id: "role_id",
                            },
                        ],
                    },
                    createdBySubject: {
                        subjectId: "subjectId",
                        subjectType: "user",
                    },
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    isExpired: true,
                    jwts: [
                        {
                            id: "id",
                            subjectType: "subjectType",
                            subjectId: "subjectId",
                            expiry: "2024-01-15T09:30:00Z",
                            createdAt: "2024-01-15T09:30:00Z",
                            updatedAt: "2024-01-15T09:30:00Z",
                        },
                    ],
                    createdBy: "createdBy",
                },
            ],
            pagination: {
                total: 100,
                offset: 0,
                limit: 10,
            },
        };
        const page = await client.personalAccessTokens.list({
            limit: 10,
            offset: 0,
        });

        expect(expected.data).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.data).toEqual(nextPage.data);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = { token: "token" };
        server
            .mockEndpoint()
            .post("/api/svc/v1/personal-access-tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.personalAccessTokens.create({
            name: "name",
        });
        expect(response).toEqual({
            token: "token",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", expirationDate: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/api/svc/v1/personal-access-tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.personalAccessTokens.create({
                name: "name",
                expirationDate: undefined,
            });
        }).rejects.toThrow(TrueFoundry.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", expirationDate: undefined };
        const rawResponseBody = { statusCode: 1, message: "message", code: undefined, details: undefined };
        server
            .mockEndpoint()
            .post("/api/svc/v1/personal-access-tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.personalAccessTokens.create({
                name: "name",
                expirationDate: undefined,
            });
        }).rejects.toThrow(TrueFoundry.ConflictError);
    });

    test("revokeAll (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { email: "email" };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .delete("/api/svc/v1/personal-access-tokens/revoke/all")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.personalAccessTokens.revokeAll({
            email: "email",
        });
        expect(response).toEqual({});
    });

    test("revokeAll (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { email: "email" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/api/svc/v1/personal-access-tokens/revoke/all")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.personalAccessTokens.revokeAll({
                email: "email",
            });
        }).rejects.toThrow(TrueFoundry.NotFoundError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .delete("/api/svc/v1/personal-access-tokens/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.personalAccessTokens.delete("id");
        expect(response).toEqual({});
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/api/svc/v1/personal-access-tokens/id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.personalAccessTokens.delete("id");
        }).rejects.toThrow(TrueFoundry.NotFoundError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                id: "id",
                name: "name",
                type: "type",
                tenantName: "tenantName",
                manifest: {
                    name: "name",
                    type: "virtual-account",
                    expiration_date: "expiration_date",
                    permissions: [{ resource_fqn: "resource_fqn", resource_type: "resource_type", role_id: "role_id" }],
                    ownedBy: { team: "team" },
                    auto_rotate: { auto_rotate_interval: 1, grace_period: 1 },
                    secret_store_config: { integration_fqn: "integration_fqn", secret_path: "secret_path" },
                },
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                isExpired: true,
                jwts: [
                    {
                        id: "id",
                        subjectType: "subjectType",
                        subjectId: "subjectId",
                        expiry: "2024-01-15T09:30:00Z",
                        createdAt: "2024-01-15T09:30:00Z",
                        updatedAt: "2024-01-15T09:30:00Z",
                    },
                ],
                createdBy: "createdBy",
            },
            token: "token",
            created: true,
        };
        server
            .mockEndpoint()
            .get("/api/svc/v1/personal-access-tokens/name")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.personalAccessTokens.get("name");
        expect(response).toEqual({
            data: {
                id: "id",
                name: "name",
                type: "type",
                tenantName: "tenantName",
                manifest: {
                    name: "name",
                    type: "virtual-account",
                    expiration_date: "expiration_date",
                    permissions: [
                        {
                            resource_fqn: "resource_fqn",
                            resource_type: "resource_type",
                            role_id: "role_id",
                        },
                    ],
                    ownedBy: {
                        team: "team",
                    },
                    auto_rotate: {
                        auto_rotate_interval: 1,
                        grace_period: 1,
                    },
                    secret_store_config: {
                        integration_fqn: "integration_fqn",
                        secret_path: "secret_path",
                    },
                },
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                isExpired: true,
                jwts: [
                    {
                        id: "id",
                        subjectType: "subjectType",
                        subjectId: "subjectId",
                        expiry: "2024-01-15T09:30:00Z",
                        createdAt: "2024-01-15T09:30:00Z",
                        updatedAt: "2024-01-15T09:30:00Z",
                    },
                ],
                createdBy: "createdBy",
            },
            token: "token",
            created: true,
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/api/svc/v1/personal-access-tokens/name")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.personalAccessTokens.get("name");
        }).rejects.toThrow(TrueFoundry.BadRequestError);
    });
});
