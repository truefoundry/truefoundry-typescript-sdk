/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { TrueFoundryClient } from "../../src/Client";

describe("PersonalAccessTokens", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = { token: "token" };
        server
            .mockEndpoint()
            .post("/api/svc/v1/personal-access-tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.personalAccessTokens.create({
            name: "name",
        });
        expect(response).toEqual({
            token: "token",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .delete("/api/svc/v1/personal-access-tokens/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.personalAccessTokens.delete("id");
        expect(response).toEqual({});
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                id: "id",
                name: "name",
                type: "type",
                tenantName: "tenantName",
                manifest: {
                    name: "name",
                    type: "virtual-account",
                    expiration_date: "expiration_date",
                    permissions: [{ resource_fqn: "resource_fqn", resource_type: "resource_type", role_id: "role_id" }],
                },
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                createdBy: "createdBy",
            },
            token: "token",
            created: true,
        };
        server
            .mockEndpoint()
            .get("/api/svc/v1/personal-access-tokens/name")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.personalAccessTokens.get("name");
        expect(response).toEqual({
            data: {
                id: "id",
                name: "name",
                type: "type",
                tenantName: "tenantName",
                manifest: {
                    name: "name",
                    type: "virtual-account",
                    expiration_date: "expiration_date",
                    permissions: [
                        {
                            resource_fqn: "resource_fqn",
                            resource_type: "resource_type",
                            role_id: "role_id",
                        },
                    ],
                },
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                createdAt: new Date("2024-01-15T09:30:00.000Z"),
                updatedAt: new Date("2024-01-15T09:30:00.000Z"),
                createdBy: "createdBy",
            },
            token: "token",
            created: true,
        });
    });
});
