/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { TrueFoundryClient } from "../../src/Client";
import * as TrueFoundry from "../../src/api/index";

describe("PromptVersions", () => {
    test("apply_tags (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { prompt_version_id: "prompt_version_id", tags: ["tags"] };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .put("/api/ml/v1/prompt-versions/tags")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.promptVersions.applyTags({
            prompt_version_id: "prompt_version_id",
            tags: ["tags"],
        });
        expect(response).toEqual({});
    });

    test("apply_tags (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { prompt_version_id: "prompt_version_id", tags: ["tags", "tags"], force: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/api/ml/v1/prompt-versions/tags")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.promptVersions.applyTags({
                prompt_version_id: "prompt_version_id",
                tags: ["tags", "tags"],
                force: undefined,
            });
        }).rejects.toThrow(TrueFoundry.UnprocessableEntityError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                id: "id",
                fqn: "fqn",
                created_by_subject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                manifest: {
                    name: "name",
                    description: "description",
                    metadata: { key: "value" },
                    version_alias: "version_alias",
                    ml_repo: "ml_repo",
                    version: 1,
                    type: "chat_prompt",
                    messages: [{ role: "system", content: "content" }],
                    variables: { key: "value" },
                    model_configuration: { provider: "provider", model: "model" },
                    tools: [{ type: "function", function: { name: "name" } }],
                    mcp_servers: [
                        { type: "mcp-server-fqn", integration_fqn: "integration_fqn", enable_all_tools: true },
                    ],
                    response_format: { type: "json_object" },
                    routing_config: {
                        type: "weight-based-routing",
                        load_balance_targets: [{ target: "target", weight: 1 }],
                    },
                    tool_call_to_mcp_mapping: {
                        key: { mcp_server_integration_id: "mcp_server_integration_id", tool_name: "tool_name" },
                    },
                },
                usage_code_snippet: "usage_code_snippet",
                ml_repo_id: "ml_repo_id",
                tags: ["tags"],
                usage_code_snippets: [{ display_name: "display_name", language: "language", code: "code" }],
                prompt_id: "prompt_id",
            },
        };
        server
            .mockEndpoint()
            .get("/api/ml/v1/prompt-versions/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.promptVersions.get("id");
        expect(response).toEqual({
            data: {
                id: "id",
                fqn: "fqn",
                created_by_subject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                manifest: {
                    name: "name",
                    description: "description",
                    metadata: {
                        key: "value",
                    },
                    version_alias: "version_alias",
                    ml_repo: "ml_repo",
                    version: 1,
                    type: "chat_prompt",
                    messages: [
                        {
                            role: "system",
                            content: "content",
                        },
                    ],
                    variables: {
                        key: "value",
                    },
                    model_configuration: {
                        provider: "provider",
                        model: "model",
                    },
                    tools: [
                        {
                            type: "function",
                            function: {
                                name: "name",
                            },
                        },
                    ],
                    mcp_servers: [
                        {
                            type: "mcp-server-fqn",
                            integration_fqn: "integration_fqn",
                            enable_all_tools: true,
                        },
                    ],
                    response_format: {
                        type: "json_object",
                    },
                    routing_config: {
                        type: "weight-based-routing",
                        load_balance_targets: [
                            {
                                target: "target",
                                weight: 1,
                            },
                        ],
                    },
                    tool_call_to_mcp_mapping: {
                        key: {
                            mcp_server_integration_id: "mcp_server_integration_id",
                            tool_name: "tool_name",
                        },
                    },
                },
                usage_code_snippet: "usage_code_snippet",
                ml_repo_id: "ml_repo_id",
                tags: ["tags"],
                usage_code_snippets: [
                    {
                        display_name: "display_name",
                        language: "language",
                        code: "code",
                    },
                ],
                prompt_id: "prompt_id",
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/api/ml/v1/prompt-versions/id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.promptVersions.get("id");
        }).rejects.toThrow(TrueFoundry.UnprocessableEntityError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .delete("/api/ml/v1/prompt-versions/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.promptVersions.delete("id");
        expect(response).toEqual({});
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/api/ml/v1/prompt-versions/id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.promptVersions.delete("id");
        }).rejects.toThrow(TrueFoundry.UnprocessableEntityError);
    });

    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    fqn: "fqn",
                    created_by_subject: { subjectId: "subjectId", subjectType: "user" },
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    manifest: {
                        name: "name",
                        metadata: { key: "value" },
                        ml_repo: "ml_repo",
                        type: "chat_prompt",
                        messages: [{ role: "system", content: "content" }],
                    },
                    usage_code_snippet: "usage_code_snippet",
                    ml_repo_id: "ml_repo_id",
                    tags: ["tags"],
                    usage_code_snippets: [{ display_name: "display_name", language: "language", code: "code" }],
                    prompt_id: "prompt_id",
                },
            ],
            pagination: { total: 100, offset: 0, limit: 10 },
        };
        server
            .mockEndpoint()
            .get("/api/ml/v1/prompt-versions")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            data: [
                {
                    id: "id",
                    fqn: "fqn",
                    created_by_subject: {
                        subjectId: "subjectId",
                        subjectType: "user",
                    },
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    manifest: {
                        name: "name",
                        metadata: {
                            key: "value",
                        },
                        ml_repo: "ml_repo",
                        type: "chat_prompt",
                        messages: [
                            {
                                role: "system",
                                content: "content",
                            },
                        ],
                    },
                    usage_code_snippet: "usage_code_snippet",
                    ml_repo_id: "ml_repo_id",
                    tags: ["tags"],
                    usage_code_snippets: [
                        {
                            display_name: "display_name",
                            language: "language",
                            code: "code",
                        },
                    ],
                    prompt_id: "prompt_id",
                },
            ],
            pagination: {
                total: 100,
                offset: 0,
                limit: 10,
            },
        };
        const page = await client.promptVersions.list({
            tag: "tag",
            fqn: "fqn",
            prompt_id: "prompt_id",
            ml_repo_id: "ml_repo_id",
            name: "name",
            version: 1,
            offset: 1,
            limit: 1,
        });

        expect(expected.data).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.data).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/api/ml/v1/prompt-versions")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.promptVersions.list();
        }).rejects.toThrow(TrueFoundry.UnprocessableEntityError);
    });
});
