/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { TrueFoundryClient } from "../../src/Client";

describe("PromptVersions", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                id: "id",
                fqn: "fqn",
                created_by_subject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                manifest: {
                    name: "name",
                    description: "description",
                    metadata: { key: "value" },
                    version_alias: "version_alias",
                    ml_repo: "ml_repo",
                    version: 1,
                    type: "chat_prompt",
                    messages: [{ role: "system", content: "content" }],
                    variables: { key: "value" },
                    model_configuration: { provider: "provider", model: "model" },
                    tools: [{ type: "function", function: { name: "name", description: "description" } }],
                    mcp_servers: [{ type: "mcp-server-fqn", integration_fqn: "integration_fqn" }],
                },
                usage_code_snippet: "usage_code_snippet",
                ml_repo_id: "ml_repo_id",
                prompt_id: "prompt_id",
            },
        };
        server
            .mockEndpoint()
            .get("/api/ml/v1/prompt-versions/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.promptVersions.get("id");
        expect(response).toEqual({
            data: {
                id: "id",
                fqn: "fqn",
                created_by_subject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                created_at: new Date("2024-01-15T09:30:00.000Z"),
                updated_at: new Date("2024-01-15T09:30:00.000Z"),
                manifest: {
                    name: "name",
                    description: "description",
                    metadata: {
                        key: "value",
                    },
                    version_alias: "version_alias",
                    ml_repo: "ml_repo",
                    version: 1,
                    type: "chat_prompt",
                    messages: [
                        {
                            role: "system",
                            content: "content",
                        },
                    ],
                    variables: {
                        key: "value",
                    },
                    model_configuration: {
                        provider: "provider",
                        model: "model",
                    },
                    tools: [
                        {
                            type: "function",
                            function: {
                                name: "name",
                                description: "description",
                            },
                        },
                    ],
                    mcp_servers: [
                        {
                            type: "mcp-server-fqn",
                            integration_fqn: "integration_fqn",
                        },
                    ],
                },
                usage_code_snippet: "usage_code_snippet",
                ml_repo_id: "ml_repo_id",
                prompt_id: "prompt_id",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .delete("/api/ml/v1/prompt-versions/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.promptVersions.delete("id");
        expect(response).toEqual({});
    });
});
