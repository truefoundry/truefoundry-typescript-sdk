/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { TrueFoundryClient } from "../../src/Client";

describe("SecretGroups", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "name",
            integrationId: "integrationId",
            secrets: [{ key: "key", value: "value" }],
        };
        const rawResponseBody = {
            data: {
                id: "id",
                fqn: "fqn",
                name: "name",
                tenantName: "tenantName",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                associatedSecrets: [{ id: "id", fqn: "fqn", name: "name", secretGroupId: "secretGroupId" }],
                integrationId: "integrationId",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                createdBy: "createdBy",
            },
        };
        server
            .mockEndpoint()
            .post("/api/svc/v1/secret-groups")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.secretGroups.create({
            name: "name",
            integrationId: "integrationId",
            secrets: [
                {
                    key: "key",
                    value: "value",
                },
            ],
        });
        expect(response).toEqual({
            data: {
                id: "id",
                fqn: "fqn",
                name: "name",
                tenantName: "tenantName",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                associatedSecrets: [
                    {
                        id: "id",
                        fqn: "fqn",
                        name: "name",
                        secretGroupId: "secretGroupId",
                    },
                ],
                integrationId: "integrationId",
                createdAt: new Date("2024-01-15T09:30:00.000Z"),
                updatedAt: new Date("2024-01-15T09:30:00.000Z"),
                createdBy: "createdBy",
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                id: "id",
                fqn: "fqn",
                name: "name",
                tenantName: "tenantName",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                associatedSecrets: [{ id: "id", fqn: "fqn", name: "name", secretGroupId: "secretGroupId" }],
                integrationId: "integrationId",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                createdBy: "createdBy",
            },
        };
        server
            .mockEndpoint()
            .get("/api/svc/v1/secret-groups/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.secretGroups.get("id");
        expect(response).toEqual({
            data: {
                id: "id",
                fqn: "fqn",
                name: "name",
                tenantName: "tenantName",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                associatedSecrets: [
                    {
                        id: "id",
                        fqn: "fqn",
                        name: "name",
                        secretGroupId: "secretGroupId",
                    },
                ],
                integrationId: "integrationId",
                createdAt: new Date("2024-01-15T09:30:00.000Z"),
                updatedAt: new Date("2024-01-15T09:30:00.000Z"),
                createdBy: "createdBy",
            },
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { secrets: [{ key: "key" }] };
        const rawResponseBody = {
            data: {
                id: "id",
                fqn: "fqn",
                name: "name",
                tenantName: "tenantName",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                associatedSecrets: [{ id: "id", fqn: "fqn", name: "name", secretGroupId: "secretGroupId" }],
                integrationId: "integrationId",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                createdBy: "createdBy",
            },
        };
        server
            .mockEndpoint()
            .put("/api/svc/v1/secret-groups/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.secretGroups.update("id", {
            secrets: [
                {
                    key: "key",
                },
            ],
        });
        expect(response).toEqual({
            data: {
                id: "id",
                fqn: "fqn",
                name: "name",
                tenantName: "tenantName",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                associatedSecrets: [
                    {
                        id: "id",
                        fqn: "fqn",
                        name: "name",
                        secretGroupId: "secretGroupId",
                    },
                ],
                integrationId: "integrationId",
                createdAt: new Date("2024-01-15T09:30:00.000Z"),
                updatedAt: new Date("2024-01-15T09:30:00.000Z"),
                createdBy: "createdBy",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .delete("/api/svc/v1/secret-groups/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.secretGroups.delete("id");
        expect(response).toEqual({});
    });
});
