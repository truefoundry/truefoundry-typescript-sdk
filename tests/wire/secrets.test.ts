/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { TrueFoundryClient } from "../../src/Client";

describe("Secrets", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                id: "id",
                fqn: "fqn",
                name: "name",
                secretGroupId: "secretGroupId",
                value: "value",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                secretVersions: [{ id: "id", fqn: "fqn" }],
                activeDeploymentsCount: 1,
                createdBy: "createdBy",
            },
        };
        server
            .mockEndpoint()
            .get("/api/svc/v1/secrets/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.secrets.get("id");
        expect(response).toEqual({
            data: {
                id: "id",
                fqn: "fqn",
                name: "name",
                secretGroupId: "secretGroupId",
                value: "value",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                secretVersions: [
                    {
                        id: "id",
                        fqn: "fqn",
                    },
                ],
                activeDeploymentsCount: 1,
                createdBy: "createdBy",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = 1.1;
        server
            .mockEndpoint()
            .delete("/api/svc/v1/secrets/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.secrets.delete("id");
        expect(response).toEqual(1.1);
    });
});
