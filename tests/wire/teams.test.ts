/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { TrueFoundryClient } from "../../src/Client";

describe("Teams", () => {
    test("create_or_update", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { manifest: { type: "team", name: "name", members: ["members"] } };
        const rawResponseBody = {
            data: {
                id: "id",
                teamName: "teamName",
                description: "description",
                tenantName: "tenantName",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                members: ["members"],
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                manifest: { type: "team", name: "name", managers: ["managers"], members: ["members"] },
            },
        };
        server
            .mockEndpoint()
            .put("/api/svc/v1/teams")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.teams.createOrUpdate({
            manifest: {
                type: "team",
                name: "name",
                members: ["members"],
            },
        });
        expect(response).toEqual({
            data: {
                id: "id",
                teamName: "teamName",
                description: "description",
                tenantName: "tenantName",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                members: ["members"],
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                manifest: {
                    type: "team",
                    name: "name",
                    managers: ["managers"],
                    members: ["members"],
                },
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                id: "id",
                teamName: "teamName",
                description: "description",
                tenantName: "tenantName",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                members: ["members"],
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                manifest: { type: "team", name: "name", managers: ["managers"], members: ["members"] },
            },
        };
        server
            .mockEndpoint()
            .get("/api/svc/v1/teams/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.teams.get("id");
        expect(response).toEqual({
            data: {
                id: "id",
                teamName: "teamName",
                description: "description",
                tenantName: "tenantName",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                members: ["members"],
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                manifest: {
                    type: "team",
                    name: "name",
                    managers: ["managers"],
                    members: ["members"],
                },
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .delete("/api/svc/v1/teams/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.teams.delete("id");
        expect(response).toEqual({});
    });
});
