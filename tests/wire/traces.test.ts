/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { TrueFoundryClient } from "../../src/Client";

describe("Traces", () => {
    test("query_spans", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { startTime: "startTime", tracingProjectFqn: "tracingProjectFqn" };
        const rawResponseBody = {
            data: [
                {
                    spanId: "spanId",
                    traceId: "traceId",
                    parentSpanId: "parentSpanId",
                    serviceName: "serviceName",
                    spanName: "spanName",
                    spanKind: "spanKind",
                    scopeName: "scopeName",
                    scopeVersion: "scopeVersion",
                    timestamp: "timestamp",
                    duration: 1.1,
                    statusCode: "statusCode",
                    statusMessage: "statusMessage",
                    spanAttributes: { key: "value" },
                    events: [{ key: "value" }],
                    createdBySubject: { subjectId: "subjectId", subjectType: "user" },
                },
            ],
            pagination: { limit: 10, nextPageToken: "nextPageToken", previousPageToken: "previousPageToken" },
        };
        server
            .mockEndpoint()
            .post("/api/svc/v1/spans/query")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            data: [
                {
                    spanId: "spanId",
                    traceId: "traceId",
                    parentSpanId: "parentSpanId",
                    serviceName: "serviceName",
                    spanName: "spanName",
                    spanKind: "spanKind",
                    scopeName: "scopeName",
                    scopeVersion: "scopeVersion",
                    timestamp: "timestamp",
                    duration: 1.1,
                    statusCode: "statusCode",
                    statusMessage: "statusMessage",
                    spanAttributes: {
                        key: "value",
                    },
                    events: [
                        {
                            key: "value",
                        },
                    ],
                    createdBySubject: {
                        subjectId: "subjectId",
                        subjectType: "user",
                    },
                },
            ],
            pagination: {
                limit: 10,
                nextPageToken: "nextPageToken",
                previousPageToken: "previousPageToken",
            },
        };
        const page = await client.traces.querySpans({
            startTime: "startTime",
            tracingProjectFqn: "tracingProjectFqn",
        });

        expect(expected.data).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.data).toEqual(nextPage.data);
    });
});
