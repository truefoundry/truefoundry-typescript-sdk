/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { TrueFoundryClient } from "../../src/Client";

describe("Users", () => {
    test("pre_register_users", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { email: "email" };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/api/svc/v1/users/register")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.preRegisterUsers({
            email: "email",
        });
        expect(response).toEqual({});
    });

    test("update_roles", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { email: "email", roles: ["roles"] };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .patch("/api/svc/v1/users/roles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.updateRoles({
            email: "email",
            roles: ["roles"],
        });
        expect(response).toEqual({});
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                id: "id",
                email: "email",
                userName: "userName",
                tenantName: "tenantName",
                metadata: {
                    sub: "sub",
                    imageURL: "imageURL",
                    displayName: "displayName",
                    userObject: { key: "value" },
                    inviteAccepted: true,
                    registeredInIdp: true,
                    preference: { key: "value" },
                },
                roles: ["roles"],
                active: true,
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
            },
        };
        server
            .mockEndpoint()
            .get("/api/svc/v1/users/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.get("id");
        expect(response).toEqual({
            data: {
                id: "id",
                email: "email",
                userName: "userName",
                tenantName: "tenantName",
                metadata: {
                    sub: "sub",
                    imageURL: "imageURL",
                    displayName: "displayName",
                    userObject: {
                        key: "value",
                    },
                    inviteAccepted: true,
                    registeredInIdp: true,
                    preference: {
                        key: "value",
                    },
                },
                roles: ["roles"],
                active: true,
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
            },
        });
    });

    test("invite_user", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { acceptInviteClientUrl: "<control plane url>/invite-accept", email: "email" };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/api/svc/v1/users/invite")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.inviteUser({
            acceptInviteClientUrl: "<control plane url>/invite-accept",
            email: "email",
        });
        expect(response).toEqual({});
    });

    test("deactivate", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { email: "email" };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .patch("/api/svc/v1/users/deactivate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.deactivate({
            email: "email",
        });
        expect(response).toEqual({});
    });

    test("activate", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { email: "email" };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .patch("/api/svc/v1/users/activate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.activate({
            email: "email",
        });
        expect(response).toEqual({});
    });

    test("change_password", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { loginId: "loginId", newPassword: "newPassword", oldPassword: "oldPassword" };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/api/svc/v1/users/change-password")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.changePassword({
            loginId: "loginId",
            newPassword: "newPassword",
            oldPassword: "oldPassword",
        });
        expect(response).toEqual({});
    });
});
