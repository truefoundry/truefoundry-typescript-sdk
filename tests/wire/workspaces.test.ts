/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { TrueFoundryClient } from "../../src/Client";
import * as TrueFoundry from "../../src/api/index";

describe("Workspaces", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    fqn: "fqn",
                    name: "name",
                    tenantName: "tenantName",
                    clusterId: "clusterId",
                    createdBySubject: { subjectId: "subjectId", subjectType: "user" },
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    environmentId: "environmentId",
                    manifest: { type: "workspace", cluster_fqn: "cluster_fqn", name: "name" },
                    isSystemWs: true,
                    createdBy: "createdBy",
                },
            ],
            pagination: { total: 100, offset: 0, limit: 10 },
        };
        server
            .mockEndpoint()
            .get("/api/svc/v1/workspaces")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            data: [
                {
                    id: "id",
                    fqn: "fqn",
                    name: "name",
                    tenantName: "tenantName",
                    clusterId: "clusterId",
                    createdBySubject: {
                        subjectId: "subjectId",
                        subjectType: "user",
                    },
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    environmentId: "environmentId",
                    manifest: {
                        type: "workspace",
                        cluster_fqn: "cluster_fqn",
                        name: "name",
                    },
                    isSystemWs: true,
                    createdBy: "createdBy",
                },
            ],
            pagination: {
                total: 100,
                offset: 0,
                limit: 10,
            },
        };
        const page = await client.workspaces.list({
            limit: 10,
            offset: 0,
            clusterId: "clusterId",
            name: "name",
            fqn: "fqn",
        });

        expect(expected.data).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.data).toEqual(nextPage.data);
    });

    test("create_or_update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { manifest: { type: "workspace", cluster_fqn: "cluster_fqn", name: "name" } };
        const rawResponseBody = {
            data: {
                id: "id",
                fqn: "fqn",
                name: "name",
                tenantName: "tenantName",
                clusterId: "clusterId",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                environmentId: "environmentId",
                manifest: {
                    type: "workspace",
                    cluster_fqn: "cluster_fqn",
                    name: "name",
                    environment_name: "environment_name",
                    labels: { key: "value" },
                    annotations: { key: "value" },
                    collaborators: [{ subject: "subject", role_id: "role_id" }],
                    permissions: [{ resource_fqn: "resource_fqn", resource_type: "resource_type", role_id: "role_id" }],
                },
                isSystemWs: true,
                createdBy: "createdBy",
            },
        };
        server
            .mockEndpoint()
            .put("/api/svc/v1/workspaces")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.workspaces.createOrUpdate({
            manifest: {
                type: "workspace",
                cluster_fqn: "cluster_fqn",
                name: "name",
            },
        });
        expect(response).toEqual({
            data: {
                id: "id",
                fqn: "fqn",
                name: "name",
                tenantName: "tenantName",
                clusterId: "clusterId",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                environmentId: "environmentId",
                manifest: {
                    type: "workspace",
                    cluster_fqn: "cluster_fqn",
                    name: "name",
                    environment_name: "environment_name",
                    labels: {
                        key: "value",
                    },
                    annotations: {
                        key: "value",
                    },
                    collaborators: [
                        {
                            subject: "subject",
                            role_id: "role_id",
                        },
                    ],
                    permissions: [
                        {
                            resource_fqn: "resource_fqn",
                            resource_type: "resource_type",
                            role_id: "role_id",
                        },
                    ],
                },
                isSystemWs: true,
                createdBy: "createdBy",
            },
        });
    });

    test("create_or_update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            manifest: {
                type: "workspace",
                cluster_fqn: "cluster_fqn",
                name: "name",
                environment_name: undefined,
                labels: undefined,
                annotations: undefined,
                collaborators: undefined,
                permissions: undefined,
            },
            dryRun: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/api/svc/v1/workspaces")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.workspaces.createOrUpdate({
                manifest: {
                    type: "workspace",
                    cluster_fqn: "cluster_fqn",
                    name: "name",
                    environment_name: undefined,
                    labels: undefined,
                    annotations: undefined,
                    collaborators: undefined,
                    permissions: undefined,
                },
                dryRun: undefined,
            });
        }).rejects.toThrow(TrueFoundry.BadRequestError);
    });

    test("create_or_update (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            manifest: {
                type: "workspace",
                cluster_fqn: "cluster_fqn",
                name: "name",
                environment_name: undefined,
                labels: undefined,
                annotations: undefined,
                collaborators: undefined,
                permissions: undefined,
            },
            dryRun: undefined,
        };
        const rawResponseBody = { statusCode: 1, message: "message", code: undefined, details: undefined };
        server
            .mockEndpoint()
            .put("/api/svc/v1/workspaces")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.workspaces.createOrUpdate({
                manifest: {
                    type: "workspace",
                    cluster_fqn: "cluster_fqn",
                    name: "name",
                    environment_name: undefined,
                    labels: undefined,
                    annotations: undefined,
                    collaborators: undefined,
                    permissions: undefined,
                },
                dryRun: undefined,
            });
        }).rejects.toThrow(TrueFoundry.ForbiddenError);
    });

    test("create_or_update (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            manifest: {
                type: "workspace",
                cluster_fqn: "cluster_fqn",
                name: "name",
                environment_name: undefined,
                labels: undefined,
                annotations: undefined,
                collaborators: undefined,
                permissions: undefined,
            },
            dryRun: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/api/svc/v1/workspaces")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.workspaces.createOrUpdate({
                manifest: {
                    type: "workspace",
                    cluster_fqn: "cluster_fqn",
                    name: "name",
                    environment_name: undefined,
                    labels: undefined,
                    annotations: undefined,
                    collaborators: undefined,
                    permissions: undefined,
                },
                dryRun: undefined,
            });
        }).rejects.toThrow(TrueFoundry.NotFoundError);
    });

    test("create_or_update (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            manifest: {
                type: "workspace",
                cluster_fqn: "cluster_fqn",
                name: "name",
                environment_name: undefined,
                labels: undefined,
                annotations: undefined,
                collaborators: undefined,
                permissions: undefined,
            },
            dryRun: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/api/svc/v1/workspaces")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.workspaces.createOrUpdate({
                manifest: {
                    type: "workspace",
                    cluster_fqn: "cluster_fqn",
                    name: "name",
                    environment_name: undefined,
                    labels: undefined,
                    annotations: undefined,
                    collaborators: undefined,
                    permissions: undefined,
                },
                dryRun: undefined,
            });
        }).rejects.toThrow(TrueFoundry.UnprocessableEntityError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                id: "id",
                fqn: "fqn",
                name: "name",
                tenantName: "tenantName",
                clusterId: "clusterId",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                environmentId: "environmentId",
                manifest: {
                    type: "workspace",
                    cluster_fqn: "cluster_fqn",
                    name: "name",
                    environment_name: "environment_name",
                    labels: { key: "value" },
                    annotations: { key: "value" },
                    collaborators: [{ subject: "subject", role_id: "role_id" }],
                    permissions: [{ resource_fqn: "resource_fqn", resource_type: "resource_type", role_id: "role_id" }],
                },
                isSystemWs: true,
                createdBy: "createdBy",
            },
        };
        server
            .mockEndpoint()
            .get("/api/svc/v1/workspaces/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.workspaces.get("id");
        expect(response).toEqual({
            data: {
                id: "id",
                fqn: "fqn",
                name: "name",
                tenantName: "tenantName",
                clusterId: "clusterId",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                environmentId: "environmentId",
                manifest: {
                    type: "workspace",
                    cluster_fqn: "cluster_fqn",
                    name: "name",
                    environment_name: "environment_name",
                    labels: {
                        key: "value",
                    },
                    annotations: {
                        key: "value",
                    },
                    collaborators: [
                        {
                            subject: "subject",
                            role_id: "role_id",
                        },
                    ],
                    permissions: [
                        {
                            resource_fqn: "resource_fqn",
                            resource_type: "resource_type",
                            role_id: "role_id",
                        },
                    ],
                },
                isSystemWs: true,
                createdBy: "createdBy",
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/api/svc/v1/workspaces/id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.workspaces.get("id");
        }).rejects.toThrow(TrueFoundry.NotFoundError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            workspace: {
                id: "id",
                fqn: "fqn",
                name: "name",
                tenantName: "tenantName",
                clusterId: "clusterId",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                environmentId: "environmentId",
                manifest: {
                    type: "workspace",
                    cluster_fqn: "cluster_fqn",
                    name: "name",
                    environment_name: "environment_name",
                    labels: { key: "value" },
                    annotations: { key: "value" },
                    collaborators: [{ subject: "subject", role_id: "role_id" }],
                    permissions: [{ resource_fqn: "resource_fqn", resource_type: "resource_type", role_id: "role_id" }],
                },
                isSystemWs: true,
                createdBy: "createdBy",
            },
            message: "message",
        };
        server
            .mockEndpoint()
            .delete("/api/svc/v1/workspaces/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.workspaces.delete("id");
        expect(response).toEqual({
            workspace: {
                id: "id",
                fqn: "fqn",
                name: "name",
                tenantName: "tenantName",
                clusterId: "clusterId",
                createdBySubject: {
                    subjectId: "subjectId",
                    subjectType: "user",
                    subjectSlug: "subjectSlug",
                    subjectDisplayName: "subjectDisplayName",
                },
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                environmentId: "environmentId",
                manifest: {
                    type: "workspace",
                    cluster_fqn: "cluster_fqn",
                    name: "name",
                    environment_name: "environment_name",
                    labels: {
                        key: "value",
                    },
                    annotations: {
                        key: "value",
                    },
                    collaborators: [
                        {
                            subject: "subject",
                            role_id: "role_id",
                        },
                    ],
                    permissions: [
                        {
                            resource_fqn: "resource_fqn",
                            resource_type: "resource_type",
                            role_id: "role_id",
                        },
                    ],
                },
                isSystemWs: true,
                createdBy: "createdBy",
            },
            message: "message",
        });
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/api/svc/v1/workspaces/id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.workspaces.delete("id");
        }).rejects.toThrow(TrueFoundry.NotFoundError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new TrueFoundryClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { statusCode: 1, message: "message", code: undefined, details: undefined };
        server
            .mockEndpoint()
            .delete("/api/svc/v1/workspaces/id")
            .respondWith()
            .statusCode(417)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.workspaces.delete("id");
        }).rejects.toThrow(TrueFoundry.ExpectationFailedError);
    });
});
